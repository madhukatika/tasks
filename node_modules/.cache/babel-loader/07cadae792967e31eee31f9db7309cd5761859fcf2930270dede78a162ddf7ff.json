{"ast":null,"code":"// import React, { useState, useEffect, useContext } from \"react\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import mergeData from \"../../json_data/merged_file.json\";\n// import Displaytable from \"../Displaytable\";\n// import Gdata from \"../GobalContext\";\n// import { Slide, Slider } from '@mui/material';\n\n// const SearchComponent = () => {\n//   let gdata = useContext(Gdata);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [selectedTime, setSelectedTime] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n\n//   useEffect(() => {\n//     performSearch(searchTerm, selectedDate, selectedTime);\n//   }, [searchTerm, selectedDate, selectedTime]);\n\n//   useEffect(() => {\n//     gdata.update(graph);\n//   }, [searchResults]);\n\n//   const handleSearch = (e) => {\n//     const term = e.target.value;\n//     setSearchTerm(term);\n//   };\n\n//   const handleDateChange = (date) => {\n//     setSelectedDate(date);\n//   };\n\n//   const handleTimeChange = (e) => {\n//     const time = e.target.value;\n//     setSelectedTime(time);\n//   };\n//   const performSearch = (term, date, time) => {\n//     const results = mergeData.filter((item) => {\n//       if (item?.thermostatPacket?.info && item?.thermostatPacket?.config && item?.thermostatPacket?.data && item?.thermostatPacket?.settings) {\n//         const { product, id } = item.thermostatPacket.info;\n//         const { programMode } = item.thermostatPacket.config;\n//         const { hvacMode } = item.thermostatPacket.settings;\n//         const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n//         if (!date && !time) {\n//           // When no date and time are selected, include all items\n//           return (\n//             product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())\n//           );\n//         } else if (date && !time) {\n//           // When only date is selected, filter by date\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toDateString() === date.toDateString()\n//           );\n//         } else if (!date && time) {\n//           // When only time is selected, filter by time\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//           );\n//         } else {\n//           // When both date and time are selected, filter by date and time\n//           const selectedDateTime = new Date(date.toDateString() + \" \" + time);\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.getTime() === selectedDateTime.getTime()\n//           );\n//         }\n//       }\n//     });\n\n//     setSearchResults(results);\n//   };\n//   var graph = searchResults.map((item, index) => item.thermostatPacket);\n//   return (\n//     <div>\n//       <div>\n//       <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search product\"\n//         value={searchTerm}\n//         onChange={handleSearch}\n//       />\n//       <DatePicker\n//         style={{ width: \"30%\", height: \"3vh\" }}\n//         selected={selectedDate}\n//         onChange={handleDateChange}\n//         placeholderText=\"mm/dd/yyyy\"\n//         dateFormat=\"MM/dd/yyyy\"\n//       />\n//             <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search time (ISO format)\"\n//         value={selectedTime}\n//         onChange={handleTimeChange}\n//       />\n//       <Slider sx={{maxWidth:'465px'}}\n//   aria-label=\"Temperature\"\n//   defaultValue={0}\n//   min={10}\n//   // getAriaValueText={valuetext}\n\n//   color=\"secondary\"\n// />\n\n//   <div className=\"table-container\">\n//       <table className=\"custom_table\">\n//         <thead>\n//           <tr>\n//             <th>date</th>\n//             <th>time</th>\n//             <th>product</th>\n//             <th>version</th>\n//             <th>id</th>\n//             <th>hvacMode</th>\n//             <th>deadband10xF</th>\n//             <th>outdoorTempLockout10xF</th>\n//             <th>programMode</th>\n//             <th>fanMode</th>\n//             <th>numHeatStages</th>\n//             <th>numCompressorStages</th>\n//             <th>numHeatStages</th>\n//             <th>smartSensorCnt</th>\n//             <th>outdoorTemperature10xF</th>\n//             <th>indoorTemperature10xF</th>\n//             <th>outdoorHumidityPer</th>\n//             <th>indoorHumidityPer</th>\n//           </tr>\n//         </thead>\n//         {searchResults.map((item, index) => (\n//           <Displaytable data={item} key={index} />\n//         ))}\n//       </table>\n//       </div>\n//       </div>\n\n//     </div>\n//   );\n// };\n\n// export default SearchComponent;\n\n// import React, { useState, useEffect, useContext } from \"react\";\n\n// import \"react-datepicker/dist/react-datepicker.css\";\n\n// import mergeData from \"../../json_data/merged_file.json\";\n\n// import Displaytable from \"../Displaytable\";\n\n// import Gdata from \"../GobalContext\";\n\n// import Slider from \"rc-slider\";\n\n// import \"rc-slider/assets/index.css\";\n\n// import \"react-datepicker/dist/react-datepicker.css\";\n\n// const SearchComponent = () => {\n//   let gdata = useContext(Gdata);\n\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n\n//   const [selectedDate, setSelectedDate] = useState(null);\n\n//   const [selectedTime, setSelectedTime] = useState(\"\");\n\n//   const [searchResults, setSearchResults] = useState([]);\n\n//   const [startDate, setStartDate] = useState(new Date());\n\n//   const [endDate, setEndDate] = useState(new Date());\n\n//   useEffect(() => {\n//     performSearch(searchTerm, startDate, endDate, selectedTime);\n//   }, [searchTerm, startDate, endDate, selectedTime]);\n\n//   useEffect(() => {\n//     gdata.update(graph);\n//   }, [searchResults]);\n\n//   const handleSearch = (e) => {\n//     const term = e.target.value;\n\n//     setSearchTerm(term);\n//   };\n\n//   const handleDateRangeChange = (values) => {\n//     setStartDate(new Date(values[0]));\n\n//     setEndDate(new Date(values[1]));\n\n//     console.log(startDate);\n\n//     console.log(endDate);\n//   };\n\n//   // const handleDateChange = (date) => {\n\n//   //   setSelectedDate(date);\n\n//   // };\n\n//   const handleTimeChange = (e) => {\n//     const time = e.target.value;\n\n//     setSelectedTime(time);\n//   };\n\n//   const performSearch = (term, startDate, endDate, time) => {\n//     const results = mergeData.filter((item) => {\n//       if (\n//         item?.thermostatPacket?.info &&\n//         item?.thermostatPacket?.config &&\n//         item?.thermostatPacket?.data &&\n//         item?.thermostatPacket?.settings\n//       ) {\n//         const { product, id } = item.thermostatPacket.info;\n\n//         const { programMode } = item.thermostatPacket.config;\n\n//         const { hvacMode } = item.thermostatPacket.settings;\n\n//         const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n//         if (!startDate && !endDate && !time) {\n//           // When no date range and time are selected, include all items\n\n//           return (\n//             product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())\n//           );\n//         } else if (!startDate && !endDate && time) {\n//           // When only time is selected, filter by time\n\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//           );\n//         } else if (startDate && endDate && !time) {\n//           // When only date range is selected, filter by date range\n\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp >= startDate &&\n//             timestamp <= endDate\n//           );\n//         } else {\n//           // When both date range and time are selected, filter by date range and time\n\n//           const selectedDateTime = new Date(\n//             startDate.toDateString() + \" \" + time\n//           );\n\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp >= startDate &&\n//             timestamp <= endDate &&\n//             timestamp.getTime() === selectedDateTime.getTime()\n//           );\n//         }\n//       }\n//     });\n\n//     setSearchResults(results);\n//   };\n\n//   var graph = searchResults.map((item, index) => item.thermostatPacket);\n\n//   return (\n//     <div>\n//       <div>\n//         <input\n//           style={{\n//             width: \"30%\",\n\n//             height: \"3vh\",\n\n//             padding: \"5px\",\n\n//             marginBottom: \"5px\",\n//           }}\n//           type=\"text\"\n//           className=\"search-bar\"\n//           placeholder=\"Search product\"\n//           value={searchTerm}\n//           onChange={handleSearch}\n//         />\n\n//         {/* <DatePicker\n\n//         style={{ width: \"30%\", height: \"3vh\" }}\n\n//         selected={selectedDate}\n\n//         onChange={handleDateChange}\n\n//         placeholderText=\"mm/dd/yyyy\"\n\n//         dateFormat=\"MM/dd/yyyy\"\n\n//       /> */}\n\n//         <input\n//           style={{\n//             width: \"30%\",\n\n//             height: \"3vh\",\n\n//             padding: \"5px\",\n\n//             marginBottom: \"5px\",\n//           }}\n//           type=\"text\"\n//           className=\"search-bar\"\n//           placeholder=\"Search time (ISO format)\"\n//           value={selectedTime}\n//           onChange={handleTimeChange}\n//         />\n\n//         <div>Start Date: {startDate.toDateString()}</div>\n\n//         <div>End Date: {endDate.toDateString()}</div>\n\n//         <Slider\n//           min={new Date(2022, 10, 7).getTime()}\n//           max={new Date(2022, 11, 2).getTime()}\n//           // defaultValue={[startDate.getTime(), endDate.getTime()]}\n//           onChange={handleDateRangeChange}\n//           range\n//           allowCross={false}\n//           style={{ width: \"50%\" }}\n//         />\n\n//         <div className=\"table-container\">\n//           <table className=\"custom_table\">\n//             <thead>\n//               <tr>\n//                 <th>date</th>\n\n//                 <th>time</th>\n\n//                 <th>product</th>\n\n//                 <th>version</th>\n\n//                 <th>id</th>\n\n//                 <th>hvacMode</th>\n\n//                 <th>deadband10xF</th>\n\n//                 <th>outdoorTempLockout10xF</th>\n\n//                 <th>programMode</th>\n\n//                 <th>fanMode</th>\n\n//                 <th>numHeatStages</th>\n\n//                 <th>numCompressorStages</th>\n\n//                 <th>numHeatStages</th>\n\n//                 <th>smartSensorCnt</th>\n\n//                 <th>outdoorTemperature10xF</th>\n\n//                 <th>indoorTemperature10xF</th>\n\n//                 <th>outdoorHumidityPer</th>\n\n//                 <th>indoorHumidityPer</th>\n//               </tr>\n//             </thead>\n\n//             {searchResults.map((item, index) => (\n//               <Displaytable data={item} key={index} />\n//             ))}\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SearchComponent;","map":{"version":3,"names":[],"sources":["C:/Users/madhavi.katika/Downloads/first-task1/first-task1-main/src/Components/SearchData/index.js"],"sourcesContent":["// import React, { useState, useEffect, useContext } from \"react\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import mergeData from \"../../json_data/merged_file.json\";\n// import Displaytable from \"../Displaytable\";\n// import Gdata from \"../GobalContext\";\n// import { Slide, Slider } from '@mui/material';\n\n// const SearchComponent = () => {\n//   let gdata = useContext(Gdata);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [selectedTime, setSelectedTime] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n\n//   useEffect(() => {\n//     performSearch(searchTerm, selectedDate, selectedTime);\n//   }, [searchTerm, selectedDate, selectedTime]);\n\n//   useEffect(() => {\n//     gdata.update(graph);\n//   }, [searchResults]);\n\n//   const handleSearch = (e) => {\n//     const term = e.target.value;\n//     setSearchTerm(term);\n//   };\n\n//   const handleDateChange = (date) => {\n//     setSelectedDate(date);\n//   };\n\n//   const handleTimeChange = (e) => {\n//     const time = e.target.value;\n//     setSelectedTime(time);\n//   };\n//   const performSearch = (term, date, time) => {\n//     const results = mergeData.filter((item) => {\n//       if (item?.thermostatPacket?.info && item?.thermostatPacket?.config && item?.thermostatPacket?.data && item?.thermostatPacket?.settings) {\n//         const { product, id } = item.thermostatPacket.info;\n//         const { programMode } = item.thermostatPacket.config;\n//         const { hvacMode } = item.thermostatPacket.settings;\n//         const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n//         if (!date && !time) {\n//           // When no date and time are selected, include all items\n//           return (\n//             product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())\n//           );\n//         } else if (date && !time) {\n//           // When only date is selected, filter by date\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toDateString() === date.toDateString()\n//           );\n//         } else if (!date && time) {\n//           // When only time is selected, filter by time\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//           );\n//         } else {\n//           // When both date and time are selected, filter by date and time\n//           const selectedDateTime = new Date(date.toDateString() + \" \" + time);\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.getTime() === selectedDateTime.getTime()\n//           );\n//         }\n//       }\n//     });\n\n//     setSearchResults(results);\n//   };\n//   var graph = searchResults.map((item, index) => item.thermostatPacket);\n//   return (\n//     <div>\n//       <div>\n//       <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search product\"\n//         value={searchTerm}\n//         onChange={handleSearch}\n//       />\n//       <DatePicker\n//         style={{ width: \"30%\", height: \"3vh\" }}\n//         selected={selectedDate}\n//         onChange={handleDateChange}\n//         placeholderText=\"mm/dd/yyyy\"\n//         dateFormat=\"MM/dd/yyyy\"\n//       />\n//             <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search time (ISO format)\"\n//         value={selectedTime}\n//         onChange={handleTimeChange}\n//       />\n//       <Slider sx={{maxWidth:'465px'}}\n//   aria-label=\"Temperature\"\n//   defaultValue={0}\n//   min={10}\n//   // getAriaValueText={valuetext}\n\n//   color=\"secondary\"\n// />\n\n//   <div className=\"table-container\">\n//       <table className=\"custom_table\">\n//         <thead>\n//           <tr>\n//             <th>date</th>\n//             <th>time</th>\n//             <th>product</th>\n//             <th>version</th>\n//             <th>id</th>\n//             <th>hvacMode</th>\n//             <th>deadband10xF</th>\n//             <th>outdoorTempLockout10xF</th>\n//             <th>programMode</th>\n//             <th>fanMode</th>\n//             <th>numHeatStages</th>\n//             <th>numCompressorStages</th>\n//             <th>numHeatStages</th>\n//             <th>smartSensorCnt</th>\n//             <th>outdoorTemperature10xF</th>\n//             <th>indoorTemperature10xF</th>\n//             <th>outdoorHumidityPer</th>\n//             <th>indoorHumidityPer</th>\n//           </tr>\n//         </thead>\n//         {searchResults.map((item, index) => (\n//           <Displaytable data={item} key={index} />\n//         ))}\n//       </table>\n//       </div>\n//       </div>\n\n//     </div>\n//   );\n// };\n\n// export default SearchComponent;\n\n// import React, { useState, useEffect, useContext } from \"react\";\n\n\n\n// import \"react-datepicker/dist/react-datepicker.css\";\n\n// import mergeData from \"../../json_data/merged_file.json\";\n\n// import Displaytable from \"../Displaytable\";\n\n// import Gdata from \"../GobalContext\";\n\n\n\n\n\n// import Slider from \"rc-slider\";\n\n// import \"rc-slider/assets/index.css\";\n\n// import \"react-datepicker/dist/react-datepicker.css\";\n\n// const SearchComponent = () => {\n//   let gdata = useContext(Gdata);\n\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n\n//   const [selectedDate, setSelectedDate] = useState(null);\n\n//   const [selectedTime, setSelectedTime] = useState(\"\");\n\n//   const [searchResults, setSearchResults] = useState([]);\n\n\n//   const [startDate, setStartDate] = useState(new Date());\n\n//   const [endDate, setEndDate] = useState(new Date());\n\n//   useEffect(() => {\n//     performSearch(searchTerm, startDate, endDate, selectedTime);\n//   }, [searchTerm, startDate, endDate, selectedTime]);\n\n//   useEffect(() => {\n//     gdata.update(graph);\n//   }, [searchResults]);\n\n//   const handleSearch = (e) => {\n//     const term = e.target.value;\n\n//     setSearchTerm(term);\n//   };\n\n//   const handleDateRangeChange = (values) => {\n//     setStartDate(new Date(values[0]));\n\n//     setEndDate(new Date(values[1]));\n\n//     console.log(startDate);\n\n//     console.log(endDate);\n//   };\n\n//   // const handleDateChange = (date) => {\n\n//   //   setSelectedDate(date);\n\n//   // };\n\n//   const handleTimeChange = (e) => {\n//     const time = e.target.value;\n\n//     setSelectedTime(time);\n//   };\n\n//   const performSearch = (term, startDate, endDate, time) => {\n//     const results = mergeData.filter((item) => {\n//       if (\n//         item?.thermostatPacket?.info &&\n//         item?.thermostatPacket?.config &&\n//         item?.thermostatPacket?.data &&\n//         item?.thermostatPacket?.settings\n//       ) {\n//         const { product, id } = item.thermostatPacket.info;\n\n//         const { programMode } = item.thermostatPacket.config;\n\n//         const { hvacMode } = item.thermostatPacket.settings;\n\n//         const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n//         if (!startDate && !endDate && !time) {\n//           // When no date range and time are selected, include all items\n\n//           return (\n//             product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())\n//           );\n//         } else if (!startDate && !endDate && time) {\n//           // When only time is selected, filter by time\n\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//           );\n//         } else if (startDate && endDate && !time) {\n//           // When only date range is selected, filter by date range\n\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp >= startDate &&\n//             timestamp <= endDate\n//           );\n//         } else {\n//           // When both date range and time are selected, filter by date range and time\n\n//           const selectedDateTime = new Date(\n//             startDate.toDateString() + \" \" + time\n//           );\n\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp >= startDate &&\n//             timestamp <= endDate &&\n//             timestamp.getTime() === selectedDateTime.getTime()\n//           );\n//         }\n//       }\n//     });\n\n//     setSearchResults(results);\n//   };\n\n//   var graph = searchResults.map((item, index) => item.thermostatPacket);\n\n//   return (\n//     <div>\n//       <div>\n//         <input\n//           style={{\n//             width: \"30%\",\n\n//             height: \"3vh\",\n\n//             padding: \"5px\",\n\n//             marginBottom: \"5px\",\n//           }}\n//           type=\"text\"\n//           className=\"search-bar\"\n//           placeholder=\"Search product\"\n//           value={searchTerm}\n//           onChange={handleSearch}\n//         />\n\n//         {/* <DatePicker\n\n//         style={{ width: \"30%\", height: \"3vh\" }}\n\n//         selected={selectedDate}\n\n//         onChange={handleDateChange}\n\n//         placeholderText=\"mm/dd/yyyy\"\n\n//         dateFormat=\"MM/dd/yyyy\"\n\n//       /> */}\n\n//         <input\n//           style={{\n//             width: \"30%\",\n\n//             height: \"3vh\",\n\n//             padding: \"5px\",\n\n//             marginBottom: \"5px\",\n//           }}\n//           type=\"text\"\n//           className=\"search-bar\"\n//           placeholder=\"Search time (ISO format)\"\n//           value={selectedTime}\n//           onChange={handleTimeChange}\n//         />\n\n \n\n       \n\n//         <div>Start Date: {startDate.toDateString()}</div>\n\n//         <div>End Date: {endDate.toDateString()}</div>\n\n//         <Slider\n//           min={new Date(2022, 10, 7).getTime()}\n//           max={new Date(2022, 11, 2).getTime()}\n//           // defaultValue={[startDate.getTime(), endDate.getTime()]}\n//           onChange={handleDateRangeChange}\n//           range\n//           allowCross={false}\n//           style={{ width: \"50%\" }}\n//         />\n\n      \n\n//         <div className=\"table-container\">\n//           <table className=\"custom_table\">\n//             <thead>\n//               <tr>\n//                 <th>date</th>\n\n//                 <th>time</th>\n\n//                 <th>product</th>\n\n//                 <th>version</th>\n\n//                 <th>id</th>\n\n//                 <th>hvacMode</th>\n\n//                 <th>deadband10xF</th>\n\n//                 <th>outdoorTempLockout10xF</th>\n\n//                 <th>programMode</th>\n\n//                 <th>fanMode</th>\n\n//                 <th>numHeatStages</th>\n\n//                 <th>numCompressorStages</th>\n\n//                 <th>numHeatStages</th>\n\n//                 <th>smartSensorCnt</th>\n\n//                 <th>outdoorTemperature10xF</th>\n\n//                 <th>indoorTemperature10xF</th>\n\n//                 <th>outdoorHumidityPer</th>\n\n//                 <th>indoorHumidityPer</th>\n//               </tr>\n//             </thead>\n\n//             {searchResults.map((item, index) => (\n//               <Displaytable data={item} key={index} />\n//             ))}\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SearchComponent;\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}