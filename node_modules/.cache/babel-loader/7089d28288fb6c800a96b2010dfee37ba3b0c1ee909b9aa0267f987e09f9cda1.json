{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhavi.katika\\\\Downloads\\\\first-task1\\\\first-task1-main\\\\src\\\\Components\\\\LineGraph.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import { Chart } from 'chart.js/auto';\n\n// const LineGraph = (props) => {\n//   let  [graphData,setGraphData]=useState([])\n//   useEffect(()=>{\n//     setGraphData([...props.lineGraph])\n//   },[props.lineGraph])\n//   console.log(graphData)\n//   const chartRef = useRef(null);\n//   const chartInstance = useRef(null);\n// let label=graphData.map((item)=>item.data.timestamp.split(\"T\")[0])\n// console.log(\"temp\",graphData.map((item) => item.data.indoorTemperature10xF))\n// console.log(label)\n//   useEffect(() => {\n//     const ctx = chartRef.current.getContext('2d');\n\n//     if (chartInstance.current) {\n//       chartInstance.current.destroy();\n//     }\n\n//     const labels = graphData.map((item)=>item.data.timestamp.split(\"T\")[0]);\n//     const datasets = graphData.map((item) => ({\n//       label: item.data.indoorTemperature10xF,\n//       data: graphData.map((item) => item.data.indoorTemperature10xF),\n//       fill: false,\n//       borderColor: getRandomColor(),\n//       tension: 0.5,\n\n//     }));\n\n//     chartInstance.current = new Chart(ctx, {\n//       type: 'line',\n//       data: {\n//         labels: labels,\n//         datasets: datasets,\n//       },\n//       options: {\n//         maintainAspectRatio: false,\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//           },\n//         },\n//       },\n//     });\n//   }, [props.lineGraph]);\n\n//   const getRandomColor = () => {\n//     const letters = '0123456789ABCDEF';\n//     let color = '#';\n//     for (let i = 0; i < 6; i++) {\n//       color += letters[Math.floor(Math.random() * 16)];\n//     }\n//     return color;\n//   };\n\n//   return <canvas ref={chartRef} style={{ width: '500px', height: '300px' }} />;\n// };\n\n// export default LineGraph;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Chart } from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineGraph = props => {\n  _s();\n  const [graphData, setGraphData] = useState([]);\n  useEffect(() => {\n    setGraphData([...props.lineGraph]);\n  }, [props.lineGraph]);\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  let labels = graphData.map(item => item.data.timestamp);\n  let datasets = graphData.map(item => ({\n    label: item.data.indoorTemperature10xF,\n    data: [item.data.indoorTemperature10xF],\n    fill: false,\n    borderColor: getRandomColor(),\n    tension: 0.5\n  }));\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: datasets\n      },\n      options: {\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  }, [props.lineGraph]);\n  const getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef,\n    style: {\n      width: '500px',\n      height: '300px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 10\n  }, this);\n};\n_s(LineGraph, \"muy02FsOBDJ5rhEhNkGNfAOjjkk=\");\n_c = LineGraph;\nexport default LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","jsxDEV","_jsxDEV","LineGraph","props","_s","graphData","setGraphData","lineGraph","chartRef","chartInstance","labels","map","item","data","timestamp","datasets","label","indoorTemperature10xF","fill","borderColor","getRandomColor","tension","ctx","current","getContext","destroy","type","options","maintainAspectRatio","scales","y","beginAtZero","letters","color","i","Math","floor","random","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/madhavi.katika/Downloads/first-task1/first-task1-main/src/Components/LineGraph.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import { Chart } from 'chart.js/auto';\r\n\r\n// const LineGraph = (props) => {\r\n//   let  [graphData,setGraphData]=useState([])\r\n//   useEffect(()=>{\r\n//     setGraphData([...props.lineGraph])\r\n//   },[props.lineGraph])\r\n//   console.log(graphData)\r\n//   const chartRef = useRef(null);\r\n//   const chartInstance = useRef(null);\r\n// let label=graphData.map((item)=>item.data.timestamp.split(\"T\")[0])\r\n// console.log(\"temp\",graphData.map((item) => item.data.indoorTemperature10xF))\r\n// console.log(label)\r\n//   useEffect(() => {\r\n//     const ctx = chartRef.current.getContext('2d');\r\n\r\n//     if (chartInstance.current) {\r\n//       chartInstance.current.destroy();\r\n//     }\r\n\r\n//     const labels = graphData.map((item)=>item.data.timestamp.split(\"T\")[0]);\r\n//     const datasets = graphData.map((item) => ({\r\n//       label: item.data.indoorTemperature10xF,\r\n//       data: graphData.map((item) => item.data.indoorTemperature10xF),\r\n//       fill: false,\r\n//       borderColor: getRandomColor(),\r\n//       tension: 0.5,\r\n      \r\n//     }));\r\n\r\n//     chartInstance.current = new Chart(ctx, {\r\n//       type: 'line',\r\n//       data: {\r\n//         labels: labels,\r\n//         datasets: datasets,\r\n//       },\r\n//       options: {\r\n//         maintainAspectRatio: false,\r\n//         scales: {\r\n//           y: {\r\n//             beginAtZero: true,\r\n//           },\r\n//         },\r\n//       },\r\n//     });\r\n//   }, [props.lineGraph]);\r\n\r\n//   const getRandomColor = () => {\r\n//     const letters = '0123456789ABCDEF';\r\n//     let color = '#';\r\n//     for (let i = 0; i < 6; i++) {\r\n//       color += letters[Math.floor(Math.random() * 16)];\r\n//     }\r\n//     return color;\r\n//   };\r\n\r\n//   return <canvas ref={chartRef} style={{ width: '500px', height: '300px' }} />;\r\n// };\r\n\r\n// export default LineGraph;\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Chart } from 'chart.js/auto';\r\n\r\nconst LineGraph = (props) => {\r\n  const [graphData, setGraphData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setGraphData([...props.lineGraph]);\r\n  }, [props.lineGraph]);\r\n\r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\n\r\n  let labels = graphData.map((item) => item.data.timestamp);\r\n  let datasets = graphData.map((item) => ({\r\n    label: item.data.indoorTemperature10xF,\r\n    data: [item.data.indoorTemperature10xF],\r\n    fill: false,\r\n    borderColor: getRandomColor(),\r\n    tension: 0.5,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n\r\n    chartInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: labels,\r\n        datasets: datasets,\r\n      },\r\n      options: {\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }, [props.lineGraph]);\r\n\r\n  const getRandomColor = () => {\r\n    const letters = '0123456789ABCDEF';\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  };\r\n\r\n  return <canvas ref={chartRef} style={{ width: '500px', height: '300px' }} />;\r\n};\r\n\r\nexport default LineGraph;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}