{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhavi.katika\\\\Downloads\\\\first-task1\\\\first-task1-main\\\\src\\\\Components\\\\LineGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Chart } from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineGraph = props => {\n  _s();\n  let [graphData, setGraphData] = useState([]);\n  useEffect(() => {\n    setGraphData([...props.lineGraph]);\n  }, [props.lineGraph]);\n  console.log(graphData);\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  let label = graphData.map(item => item.data.timestamp.split(\"T\")[0]);\n  console.log(\"temp\", graphData.map(item => item.data.indoorTemperature10xF));\n  console.log(label);\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    const labels = graphData.map(item => item.data.timestamp.split(\"T\")[0]);\n    const datasets = graphData.map(item => ({\n      label: item.data.indoorTemperature10xF,\n      data: graphData.map(item => item.data.indoorTemperature10xF),\n      fill: false,\n      borderColor: getRandomColor(),\n      tension: 0.5\n    }));\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: datasets\n      },\n      options: {\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  }, [props.lineGraph]);\n  const getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef,\n    style: {\n      width: '500px',\n      height: '300px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n};\n_s(LineGraph, \"aihPMNUJg/97Rxzb0GSLqBbWebc=\");\n_c = LineGraph;\nexport default LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","jsxDEV","_jsxDEV","LineGraph","props","_s","graphData","setGraphData","lineGraph","console","log","chartRef","chartInstance","label","map","item","data","timestamp","split","indoorTemperature10xF","ctx","current","getContext","destroy","labels","datasets","fill","borderColor","getRandomColor","tension","type","options","maintainAspectRatio","scales","y","beginAtZero","letters","color","i","Math","floor","random","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/madhavi.katika/Downloads/first-task1/first-task1-main/src/Components/LineGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Chart } from 'chart.js/auto';\r\n\r\nconst LineGraph = (props) => {\r\n  let  [graphData,setGraphData]=useState([])\r\n  useEffect(()=>{\r\n    setGraphData([...props.lineGraph])\r\n  },[props.lineGraph])\r\n  console.log(graphData)\r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\nlet label=graphData.map((item)=>item.data.timestamp.split(\"T\")[0])\r\nconsole.log(\"temp\",graphData.map((item) => item.data.indoorTemperature10xF))\r\nconsole.log(label)\r\n  useEffect(() => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n\r\n    const labels = graphData.map((item)=>item.data.timestamp.split(\"T\")[0]);\r\n    const datasets = graphData.map((item) => ({\r\n      label: item.data.indoorTemperature10xF,\r\n      data: graphData.map((item) => item.data.indoorTemperature10xF),\r\n      fill: false,\r\n      borderColor: getRandomColor(),\r\n      tension: 0.5,\r\n      \r\n    }));\r\n\r\n    chartInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: labels,\r\n        datasets: datasets,\r\n      },\r\n      options: {\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }, [props.lineGraph]);\r\n\r\n  const getRandomColor = () => {\r\n    const letters = '0123456789ABCDEF';\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  };\r\n\r\n  return <canvas ref={chartRef} style={{ width: '500px', height: '300px' }} />;\r\n};\r\n\r\nexport default LineGraph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}