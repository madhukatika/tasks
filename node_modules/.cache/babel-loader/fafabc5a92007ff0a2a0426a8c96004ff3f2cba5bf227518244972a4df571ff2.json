{"ast":null,"code":"// import React, { useEffect, useRef, useState } from 'react';\n// import { Chart } from 'chart.js/auto';\n\n// const LineGraph = (props) => {\n//   const [graphData, setGraphData] = useState([]);\n\n//   useEffect(() => {\n//     setGraphData([...props.lineGraph]);\n//   }, [props.lineGraph]);\n\n//   const chartRef = useRef(null);\n//   const chartInstance = useRef(null);\n\n//   let labels = graphData.map((item) => item.data.timestamp);\n//   let datasets = [];\n\n//   const fields = [\n//     { key: 'indoorTemperature10xF', label: 'Indoor Temperature' },\n//     { key: 'outdoorHumidityPer', label: 'Outdoor Humidity' },\n//     { key: 'indoorHumidityPer', label: 'Indoor Humidity' },\n//     { key: 'outdoorTemperature10xF', label: 'Outdoor Temperature' },\n//   ];\n\n//   useEffect(() => {\n//     const ctx = chartRef.current.getContext('2d');\n\n//     if (chartInstance.current) {\n//       chartInstance.current.destroy();\n//     }\n\n//     datasets = fields.map((field) => ({\n//       label: field.label,\n//       data: graphData.map((item) => item.data[field.key]),\n//       fill: false,\n//       borderColor: getRandomColor(),\n//       tension: 0.1,\n//     }));\n\n//     chartInstance.current = new Chart(ctx, {\n//       type: 'line',\n//       data: {\n//         labels: labels,\n//         datasets: datasets,\n//       },\n//       options: {\n//         maintainAspectRatio: true,\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//           },\n//         },\n//       },\n//     });\n//   }, [graphData]);\n\n//   const getRandomColor = () => {\n//     const letters = '0123456789ABCDEF';\n//     let color = '#';\n//     for (let i = 0; i < 6; i++) {\n//       color += letters[Math.floor(Math.random() * 16)];\n//     }\n//     return color;\n//   };\n\n//   return <canvas ref={chartRef} style={{ width: '100%', height: '200px' }} />;\n// };\n\n// export default LineGraph;\n\n// import React, { useEffect, useRef } from 'react';\n// import { Chart } from 'chart.js/auto';\n// import Slider from 'rc-slider';\n// import 'rc-slider/assets/index.css';\n\n// const LineGraph = ({ lineGraph }) => {\n//   const chartRef = useRef(null);\n//   const chartInstance = useRef(null);\n\n//   useEffect(() => {\n//     const ctx = chartRef.current.getContext('2d');\n\n//     if (chartInstance.current) {\n//       chartInstance.current.destroy();\n//     }\n\n//     if (Array.isArray(lineGraph) && lineGraph.length > 0) {\n//       const labels = lineGraph.map((item) => item.timestamp);\n//       const datasets = [\n//         {\n//           label: 'Data',\n//           data: lineGraph.map((item) => item.value),\n//           fill: false,\n//           borderColor: 'rgba(75,192,192,1)',\n//           tension: 0.1,\n//         },\n//       ];\n\n//       chartInstance.current = new Chart(ctx, {\n//         type: 'line',\n//         data: {\n//           labels: labels,\n//           datasets: datasets,\n//         },\n//         options: {\n//           maintainAspectRatio: true,\n//           scales: {\n//             y: {\n//               beginAtZero: true,\n//             },\n//           },\n//         },\n//       });\n//     }\n//   }, [lineGraph]);\n\n//   return (\n//     <div>\n//       <canvas ref={chartRef} style={{ width: '100%', height: '200px' }} />\n//       <Slider\n//         min={new Date('2022-11-07').getTime()}\n//         max={new Date('2022-12-02').getTime()}\n//         defaultValue={new Date('2022-11-07').getTime()}\n//         marks={{\n//           [new Date('2022-11-07').getTime()]: '2022-11-07',\n//           [new Date('2022-12-02').getTime()]: '2022-12-02',\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default LineGraph;","map":{"version":3,"names":[],"sources":["C:/Users/madhavi.katika/Downloads/first-task1/first-task1-main/src/Components/LineGraph.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import { Chart } from 'chart.js/auto';\r\n\r\n// const LineGraph = (props) => {\r\n//   const [graphData, setGraphData] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     setGraphData([...props.lineGraph]);\r\n//   }, [props.lineGraph]);\r\n\r\n//   const chartRef = useRef(null);\r\n//   const chartInstance = useRef(null);\r\n\r\n//   let labels = graphData.map((item) => item.data.timestamp);\r\n//   let datasets = [];\r\n\r\n//   const fields = [\r\n//     { key: 'indoorTemperature10xF', label: 'Indoor Temperature' },\r\n//     { key: 'outdoorHumidityPer', label: 'Outdoor Humidity' },\r\n//     { key: 'indoorHumidityPer', label: 'Indoor Humidity' },\r\n//     { key: 'outdoorTemperature10xF', label: 'Outdoor Temperature' },\r\n//   ];\r\n\r\n//   useEffect(() => {\r\n//     const ctx = chartRef.current.getContext('2d');\r\n\r\n//     if (chartInstance.current) {\r\n//       chartInstance.current.destroy();\r\n//     }\r\n\r\n//     datasets = fields.map((field) => ({\r\n//       label: field.label,\r\n//       data: graphData.map((item) => item.data[field.key]),\r\n//       fill: false,\r\n//       borderColor: getRandomColor(),\r\n//       tension: 0.1,\r\n//     }));\r\n\r\n//     chartInstance.current = new Chart(ctx, {\r\n//       type: 'line',\r\n//       data: {\r\n//         labels: labels,\r\n//         datasets: datasets,\r\n//       },\r\n//       options: {\r\n//         maintainAspectRatio: true,\r\n//         scales: {\r\n//           y: {\r\n//             beginAtZero: true,\r\n//           },\r\n//         },\r\n//       },\r\n//     });\r\n//   }, [graphData]);\r\n\r\n//   const getRandomColor = () => {\r\n//     const letters = '0123456789ABCDEF';\r\n//     let color = '#';\r\n//     for (let i = 0; i < 6; i++) {\r\n//       color += letters[Math.floor(Math.random() * 16)];\r\n//     }\r\n//     return color;\r\n//   };\r\n\r\n//   return <canvas ref={chartRef} style={{ width: '100%', height: '200px' }} />;\r\n// };\r\n\r\n// export default LineGraph;\r\n\r\n// import React, { useEffect, useRef } from 'react';\r\n// import { Chart } from 'chart.js/auto';\r\n// import Slider from 'rc-slider';\r\n// import 'rc-slider/assets/index.css';\r\n\r\n// const LineGraph = ({ lineGraph }) => {\r\n//   const chartRef = useRef(null);\r\n//   const chartInstance = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const ctx = chartRef.current.getContext('2d');\r\n\r\n//     if (chartInstance.current) {\r\n//       chartInstance.current.destroy();\r\n//     }\r\n\r\n//     if (Array.isArray(lineGraph) && lineGraph.length > 0) {\r\n//       const labels = lineGraph.map((item) => item.timestamp);\r\n//       const datasets = [\r\n//         {\r\n//           label: 'Data',\r\n//           data: lineGraph.map((item) => item.value),\r\n//           fill: false,\r\n//           borderColor: 'rgba(75,192,192,1)',\r\n//           tension: 0.1,\r\n//         },\r\n//       ];\r\n\r\n//       chartInstance.current = new Chart(ctx, {\r\n//         type: 'line',\r\n//         data: {\r\n//           labels: labels,\r\n//           datasets: datasets,\r\n//         },\r\n//         options: {\r\n//           maintainAspectRatio: true,\r\n//           scales: {\r\n//             y: {\r\n//               beginAtZero: true,\r\n//             },\r\n//           },\r\n//         },\r\n//       });\r\n//     }\r\n//   }, [lineGraph]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <canvas ref={chartRef} style={{ width: '100%', height: '200px' }} />\r\n//       <Slider\r\n//         min={new Date('2022-11-07').getTime()}\r\n//         max={new Date('2022-12-02').getTime()}\r\n//         defaultValue={new Date('2022-11-07').getTime()}\r\n//         marks={{\r\n//           [new Date('2022-11-07').getTime()]: '2022-11-07',\r\n//           [new Date('2022-12-02').getTime()]: '2022-12-02',\r\n//         }}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default LineGraph;\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}