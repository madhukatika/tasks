{"ast":null,"code":"\n// import React, { useState, useEffect, useContext } from \"react\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import mergeData from \"../../json_data/merged_file.json\";\n// import Displaytable from \"../Displaytable\";\n// import Gdata from \"../GobalContext\";\n\n// const SearchComponent = () => {\n//   let gdata = useContext(Gdata);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [selectedTime, setSelectedTime] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n\n//   useEffect(() => {\n//     performSearch(searchTerm, selectedDate, selectedTime);\n//   }, [searchTerm, selectedDate, selectedTime]);\n\n//   useEffect(() => {\n//     gdata.update(graph);\n//   }, [searchResults]);\n\n//   const handleSearch = (e) => {\n//     const term = e.target.value;\n//     setSearchTerm(term);\n//   };\n\n//   const handleDateChange = (date) => {\n//     setSelectedDate(date);\n//   };\n\n//   const handleTimeChange = (e) => {\n//     const time = e.target.value;\n//     setSelectedTime(time);\n//   };\n\n// const performSearch = (term, date, time) => {\n//   const results = mergeData.filter((item) => {\n//     if (item?.thermostatPacket?.info && item?.thermostatPacket?.config && item?.thermostatPacket?.data && item?.thermostatPacket?.settings) {\n//       const { product, id } = item.thermostatPacket.info;\n//       const { programMode } = item.thermostatPacket.config;\n//       const { hvacMode } = item.thermostatPacket.settings;\n//       const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n//       if (!date && !time) {\n//         // When no date and time are selected, include all items\n//         return (\n//           product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//           programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//           hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//           id?.toLowerCase()?.includes(term?.toLowerCase())\n//         );\n//       } else if (date && !time) {\n//         // When only date is selected, filter by date\n//         return (\n//           (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//           programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//           timestamp.toDateString() === date.toDateString()\n//         );\n//       } else if (!date && time) {\n//         // When only time is selected, filter by time\n//         return (\n//           (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//           programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//           timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//         );\n//       } else {\n//         // When both date and time are selected, filter by date and time\n//         const selectedDateTime = new Date(date.toDateString() + \" \" + time);\n//         return (\n//           (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//           programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//           timestamp.getTime() === selectedDateTime.getTime()\n//         );\n//       }\n//     }\n//   });\n\n//   setSearchResults(results);\n// };\n//   // const performSearch = (term, date, time) => {\n//   //   const results = mergeData.filter((item) => {\n//   //     if (item.hasOwnProperty(\"thermostatPacket\")) {\n//   //       const { product } = item.thermostatPacket.info;\n//   //       const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n//   //       if (!date && !time) {\n//   //         // When no date and time are selected, include all items\n//   //         return product.toLowerCase().includes(term.toLowerCase());\n//   //       } else if (date && !time) {\n//   //         // When only date is selected, filter by date\n//   //         return (\n//   //           product.toLowerCase().includes(term.toLowerCase()) &&\n//   //           timestamp.toDateString() === date.toDateString()\n//   //         );\n//   //       } else if (!date && time) {\n//   //         // When only time is selected, filter by time\n//   //         return (\n//   //           product.toLowerCase().includes(term.toLowerCase()) &&\n//   //           timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//   //         );\n//   //       } else {\n//   //         // When both date and time are selected, filter by date and time\n//   //         const selectedDateTime = new Date(date.toDateString() + \" \" + time);\n//   //         return (\n//   //           product.toLowerCase().includes(term.toLowerCase()) &&\n//   //           timestamp.getTime() === selectedDateTime.getTime()\n//   //         );\n//   //       }\n//   //     }\n//   //   });\n\n//   //   setSearchResults(results);\n//   // };\n\n//   var graph = searchResults.map((item, index) => item.thermostatPacket);\n\n//   return (\n//     <div>\n//       <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search product\"\n//         value={searchTerm}\n//         onChange={handleSearch}\n//       />\n//       <DatePicker\n//         style={{ width: \"30%\", height: \"3vh\" }}\n//         selected={selectedDate}\n//         onChange={handleDateChange}\n//         placeholderText=\"mm/dd/yyyy\"\n//         dateFormat=\"MM/dd/yyyy\"\n//       />\n//             <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search time (ISO format)\"\n//         value={selectedTime}\n//         onChange={handleTimeChange}\n//       />\n\n//       <table className=\"custom_table\">\n//         <thead>\n//           <tr>\n//             <th>date</th>\n//             <th>time</th>\n//             <th>product</th>\n//             <th>version</th>\n//             <th>id</th>\n//             <th>hvacMode</th>\n//             <th>deadband10xF</th>\n//             <th>outdoorTempLockout10xF</th>\n//             <th>programMode</th>\n//             <th>fanMode</th>\n//             <th>numHeatStages</th>\n//             <th>numCompressorStages</th>\n//             <th>numHeatStages</th>\n//             <th>smartSensorCnt</th>\n//             <th>outdoorTemperature10xF</th>\n//             <th>indoorTemperature10xF</th>\n//             <th>outdoorHumidityPer</th>\n//             <th>indoorHumidityPer</th>\n//           </tr>\n//         </thead>\n//         {searchResults.map((item, index) => (\n//           <Displaytable data={item} key={index} />\n//         ))}\n//       </table>\n\n//     </div>\n//   );\n// };\n\n// export default SearchComponent;\n\n// import React, { useState, useEffect, useContext } from \"react\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import mergeData from \"../../json_data/merged_file.json\";\n// import Displaytable from \"../Displaytable\";\n// import Gdata from \"../GobalContext\";\n\n// const SearchComponent = () => {\n//   let gdata = useContext(Gdata);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [selectedTime, setSelectedTime] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n\n//   useEffect(() => {\n//     performSearch(searchTerm, selectedDate, selectedTime);\n//   }, [searchTerm, selectedDate, selectedTime]);\n\n//   useEffect(() => {\n//     gdata.update(graph);\n//   }, [searchResults]);\n\n//   const handleSearch = (e) => {\n//     const term = e.target.value;\n//     setSearchTerm(term);\n//   };\n\n//   const handleDateChange = (date) => {\n//     setSelectedDate(date);\n//   };\n\n//   const handleTimeChange = (e) => {\n//     const time = e.target.value;\n//     setSelectedTime(time);\n//   };\n//   const performSearch = (term, date, time) => {\n//     const results = mergeData.filter((item) => {\n//       if (item?.thermostatPacket?.info && item?.thermostatPacket?.config && item?.thermostatPacket?.data && item?.thermostatPacket?.settings) {\n//         const { product, id } = item.thermostatPacket.info;\n//         const { programMode } = item.thermostatPacket.config;\n//         const { hvacMode } = item.thermostatPacket.settings;\n//         const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n//         if (!date && !time) {\n//           // When no date and time are selected, include all items\n//           return (\n//             product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())\n//           );\n//         } else if (date && !time) {\n//           // When only date is selected, filter by date\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toDateString() === date.toDateString()\n//           );\n//         } else if (!date && time) {\n//           // When only time is selected, filter by time\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//           );\n//         } else {\n//           // When both date and time are selected, filter by date and time\n//           const selectedDateTime = new Date(date.toDateString() + \" \" + time);\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.getTime() === selectedDateTime.getTime()\n//           );\n//         }\n//       }\n//     });\n\n//     setSearchResults(results);\n//   };\n\n//   var graph = searchResults.map((item, index) => item.thermostatPacket);\n\n//   return (\n//     <div>\n//       <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search product, fanMode, hvacMode, or id\"\n//         value={searchTerm}\n//         onChange={handleSearch}\n//       />\n//       <DatePicker\n//         style={{ width: \"30%\", height: \"3vh\" }}\n//         selected={selectedDate}\n//         onChange={handleDateChange}\n//         placeholderText=\"mm/dd/yyyy\"\n//         dateFormat=\"MM/dd/yyyy\"\n//       />\n//       <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search time (ISO format)\"\n//         value={selectedTime}\n//         onChange={handleTimeChange}\n//       />\n\n//       <table className=\"custom_table\">\n//         <thead>\n//           <tr>\n//             <th>date</th>\n//             <th>time</th>\n//             <th>product</th>\n//             <th>version</th>\n//             <th>id</th>\n//             <th>hvacMode</th>\n//             <th>deadband10xF</th>\n//             <th>outdoorTempLockout10xF</th>\n//             <th>programMode</th>\n//             <th>fanMode</th>\n//             <th>numHeatStages</th>\n//             <th>numCompressorStages</th>\n//             <th>numHeatStages</th>\n//             <th>smartSensorCnt</th>\n//             <th>outdoorTemperature10xF</th>\n//             <th>indoorTemperature10xF</th>\n//             <th>outdoorHumidityPer</th>\n//             <th>indoorHumidityPer</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {searchResults.map((item, index) => (\n//             <Displaytable data={item} key={index} />\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default SearchComponent;","map":{"version":3,"names":[],"sources":["C:/Users/madhavi.katika/Downloads/first-task1/first-task1-main/src/Components/SearchData/index.js"],"sourcesContent":["\n// import React, { useState, useEffect, useContext } from \"react\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import mergeData from \"../../json_data/merged_file.json\";\n// import Displaytable from \"../Displaytable\";\n// import Gdata from \"../GobalContext\";\n\n// const SearchComponent = () => {\n//   let gdata = useContext(Gdata);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [selectedTime, setSelectedTime] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n\n//   useEffect(() => {\n//     performSearch(searchTerm, selectedDate, selectedTime);\n//   }, [searchTerm, selectedDate, selectedTime]);\n\n//   useEffect(() => {\n//     gdata.update(graph);\n//   }, [searchResults]);\n\n//   const handleSearch = (e) => {\n//     const term = e.target.value;\n//     setSearchTerm(term);\n//   };\n\n//   const handleDateChange = (date) => {\n//     setSelectedDate(date);\n//   };\n\n//   const handleTimeChange = (e) => {\n//     const time = e.target.value;\n//     setSelectedTime(time);\n//   };\n\n// const performSearch = (term, date, time) => {\n//   const results = mergeData.filter((item) => {\n//     if (item?.thermostatPacket?.info && item?.thermostatPacket?.config && item?.thermostatPacket?.data && item?.thermostatPacket?.settings) {\n//       const { product, id } = item.thermostatPacket.info;\n//       const { programMode } = item.thermostatPacket.config;\n//       const { hvacMode } = item.thermostatPacket.settings;\n//       const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n//       if (!date && !time) {\n//         // When no date and time are selected, include all items\n//         return (\n//           product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//           programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//           hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//           id?.toLowerCase()?.includes(term?.toLowerCase())\n//         );\n//       } else if (date && !time) {\n//         // When only date is selected, filter by date\n//         return (\n//           (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//           programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//           timestamp.toDateString() === date.toDateString()\n//         );\n//       } else if (!date && time) {\n//         // When only time is selected, filter by time\n//         return (\n//           (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//           programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//           timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//         );\n//       } else {\n//         // When both date and time are selected, filter by date and time\n//         const selectedDateTime = new Date(date.toDateString() + \" \" + time);\n//         return (\n//           (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//           programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//           timestamp.getTime() === selectedDateTime.getTime()\n//         );\n//       }\n//     }\n//   });\n\n//   setSearchResults(results);\n// };\n//   // const performSearch = (term, date, time) => {\n//   //   const results = mergeData.filter((item) => {\n//   //     if (item.hasOwnProperty(\"thermostatPacket\")) {\n//   //       const { product } = item.thermostatPacket.info;\n//   //       const timestamp = new Date(item.thermostatPacket.data.timestamp);\n  \n//   //       if (!date && !time) {\n//   //         // When no date and time are selected, include all items\n//   //         return product.toLowerCase().includes(term.toLowerCase());\n//   //       } else if (date && !time) {\n//   //         // When only date is selected, filter by date\n//   //         return (\n//   //           product.toLowerCase().includes(term.toLowerCase()) &&\n//   //           timestamp.toDateString() === date.toDateString()\n//   //         );\n//   //       } else if (!date && time) {\n//   //         // When only time is selected, filter by time\n//   //         return (\n//   //           product.toLowerCase().includes(term.toLowerCase()) &&\n//   //           timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//   //         );\n//   //       } else {\n//   //         // When both date and time are selected, filter by date and time\n//   //         const selectedDateTime = new Date(date.toDateString() + \" \" + time);\n//   //         return (\n//   //           product.toLowerCase().includes(term.toLowerCase()) &&\n//   //           timestamp.getTime() === selectedDateTime.getTime()\n//   //         );\n//   //       }\n//   //     }\n//   //   });\n  \n//   //   setSearchResults(results);\n//   // };\n  \n\n//   var graph = searchResults.map((item, index) => item.thermostatPacket);\n  \n\n//   return (\n//     <div>\n//       <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search product\"\n//         value={searchTerm}\n//         onChange={handleSearch}\n//       />\n//       <DatePicker\n//         style={{ width: \"30%\", height: \"3vh\" }}\n//         selected={selectedDate}\n//         onChange={handleDateChange}\n//         placeholderText=\"mm/dd/yyyy\"\n//         dateFormat=\"MM/dd/yyyy\"\n//       />\n//             <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search time (ISO format)\"\n//         value={selectedTime}\n//         onChange={handleTimeChange}\n//       />\n    \n\n      \n\n//       <table className=\"custom_table\">\n//         <thead>\n//           <tr>\n//             <th>date</th>\n//             <th>time</th>\n//             <th>product</th>\n//             <th>version</th>\n//             <th>id</th>\n//             <th>hvacMode</th>\n//             <th>deadband10xF</th>\n//             <th>outdoorTempLockout10xF</th>\n//             <th>programMode</th>\n//             <th>fanMode</th>\n//             <th>numHeatStages</th>\n//             <th>numCompressorStages</th>\n//             <th>numHeatStages</th>\n//             <th>smartSensorCnt</th>\n//             <th>outdoorTemperature10xF</th>\n//             <th>indoorTemperature10xF</th>\n//             <th>outdoorHumidityPer</th>\n//             <th>indoorHumidityPer</th>\n//           </tr>\n//         </thead>\n//         {searchResults.map((item, index) => (\n//           <Displaytable data={item} key={index} />\n//         ))}\n//       </table>\n      \n//     </div>\n//   );\n// };\n\n// export default SearchComponent;\n\n\n// import React, { useState, useEffect, useContext } from \"react\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import mergeData from \"../../json_data/merged_file.json\";\n// import Displaytable from \"../Displaytable\";\n// import Gdata from \"../GobalContext\";\n\n// const SearchComponent = () => {\n//   let gdata = useContext(Gdata);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [selectedTime, setSelectedTime] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n\n//   useEffect(() => {\n//     performSearch(searchTerm, selectedDate, selectedTime);\n//   }, [searchTerm, selectedDate, selectedTime]);\n\n//   useEffect(() => {\n//     gdata.update(graph);\n//   }, [searchResults]);\n\n//   const handleSearch = (e) => {\n//     const term = e.target.value;\n//     setSearchTerm(term);\n//   };\n\n//   const handleDateChange = (date) => {\n//     setSelectedDate(date);\n//   };\n\n//   const handleTimeChange = (e) => {\n//     const time = e.target.value;\n//     setSelectedTime(time);\n//   };\n//   const performSearch = (term, date, time) => {\n//     const results = mergeData.filter((item) => {\n//       if (item?.thermostatPacket?.info && item?.thermostatPacket?.config && item?.thermostatPacket?.data && item?.thermostatPacket?.settings) {\n//         const { product, id } = item.thermostatPacket.info;\n//         const { programMode } = item.thermostatPacket.config;\n//         const { hvacMode } = item.thermostatPacket.settings;\n//         const timestamp = new Date(item.thermostatPacket.data.timestamp);\n  \n//         if (!date && !time) {\n//           // When no date and time are selected, include all items\n//           return (\n//             product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())\n//           );\n//         } else if (date && !time) {\n//           // When only date is selected, filter by date\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toDateString() === date.toDateString()\n//           );\n//         } else if (!date && time) {\n//           // When only time is selected, filter by time\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//           );\n//         } else {\n//           // When both date and time are selected, filter by date and time\n//           const selectedDateTime = new Date(date.toDateString() + \" \" + time);\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.getTime() === selectedDateTime.getTime()\n//           );\n//         }\n//       }\n//     });\n  \n//     setSearchResults(results);\n//   };\n  \n  \n  \n\n\n//   var graph = searchResults.map((item, index) => item.thermostatPacket);\n\n//   return (\n//     <div>\n//       <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search product, fanMode, hvacMode, or id\"\n//         value={searchTerm}\n//         onChange={handleSearch}\n//       />\n//       <DatePicker\n//         style={{ width: \"30%\", height: \"3vh\" }}\n//         selected={selectedDate}\n//         onChange={handleDateChange}\n//         placeholderText=\"mm/dd/yyyy\"\n//         dateFormat=\"MM/dd/yyyy\"\n//       />\n//       <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search time (ISO format)\"\n//         value={selectedTime}\n//         onChange={handleTimeChange}\n//       />\n\n//       <table className=\"custom_table\">\n//         <thead>\n//           <tr>\n//             <th>date</th>\n//             <th>time</th>\n//             <th>product</th>\n//             <th>version</th>\n//             <th>id</th>\n//             <th>hvacMode</th>\n//             <th>deadband10xF</th>\n//             <th>outdoorTempLockout10xF</th>\n//             <th>programMode</th>\n//             <th>fanMode</th>\n//             <th>numHeatStages</th>\n//             <th>numCompressorStages</th>\n//             <th>numHeatStages</th>\n//             <th>smartSensorCnt</th>\n//             <th>outdoorTemperature10xF</th>\n//             <th>indoorTemperature10xF</th>\n//             <th>outdoorHumidityPer</th>\n//             <th>indoorHumidityPer</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {searchResults.map((item, index) => (\n//             <Displaytable data={item} key={index} />\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default SearchComponent;\n\n\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}