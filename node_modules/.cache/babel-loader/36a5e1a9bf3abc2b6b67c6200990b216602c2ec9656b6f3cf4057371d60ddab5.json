{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhavi.katika\\\\Downloads\\\\first-task1\\\\first-task1-main\\\\src\\\\Components\\\\LineGraph.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import { Chart } from 'chart.js/auto';\n\n// const LineGraph = (props) => {\n//   let  [graphData,setGraphData]=useState([])\n//   useEffect(()=>{\n//     setGraphData([...props.lineGraph])\n//   },[props.lineGraph])\n//   console.log(graphData)\n//   const chartRef = useRef(null);\n//   const chartInstance = useRef(null);\n// let label=graphData.map((item)=>item.data.timestamp.split(\"T\")[0])\n\n// console.log(\"temp\",graphData.map((item) => item.data.indoorTemperature10xF))\n// console.log(label)\n//   useEffect(() => {\n//     const ctx = chartRef.current.getContext('2d');\n\n//     if (chartInstance.current) {\n//       chartInstance.current.destroy();\n//     }\n\n//     const labels = graphData.map((item)=>item.data.timestamp.split(\"T\")[0]);\n\n//     const datasets = graphData.map((item) => ({\n//       label: item.data.indoorTemperature10xF,\n//       data: graphData.map((item) => item.data.indoorTemperature10xF),\n//       fill: false,\n//       borderColor: getRandomColor(),\n//       tension: 0.1,\n\n//     }));\n\n//     chartInstance.current = new Chart(ctx, {\n//       type: 'line',\n//       data: {\n//         labels: labels,\n//         datasets: datasets,\n//       },\n//       options: {\n//         maintainAspectRatio:true,\n//         scales: {\n\n//           y: {\n//             beginAtZero: false,\n//           },\n//         },\n//       },\n//     });\n//   }, [props.lineGraph]);\n\n//   const getRandomColor = () => {\n//     const letters = '0123456789ABCDEF';\n//     let color = '#';\n//     for (let i = 0; i < 6; i++) {\n//       color += letters[Math.floor(Math.random() * 16)];\n//     }\n//     return color;\n//   };\n\n//   return <canvas ref={chartRef} style={{ width: '10%', height: '10%' }} />;\n// };\n\n// export default LineGraph;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Chart } from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineGraph = props => {\n  _s();\n  const [graphData, setGraphData] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  useEffect(() => {\n    setGraphData([...props.lineGraph]);\n  }, [props.lineGraph]);\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  let labels = graphData.map(item => item.data.timestamp.split('T')[0]);\n  let temperatureData = graphData.map(item => item.data.indoorTemperature10xF);\n  if (searchTerm) {\n    const searchRegex = new RegExp(searchTerm, 'i');\n    labels = labels.filter(label => searchRegex.test(label));\n    temperatureData = temperatureData.filter(data => searchRegex.test(data.toString()));\n  }\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Indoor Temperature (10xF)',\n          data: temperatureData,\n          fill: false,\n          borderColor: getRandomColor(),\n          tension: 0.1\n        }]\n      },\n      options: {\n        maintainAspectRatio: true,\n        scales: {\n          y: {\n            beginAtZero: false\n          }\n        }\n      }\n    });\n  }, [graphData, searchTerm]);\n  const getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n  const handleSearch = e => {\n    const term = e.target.value;\n    setSearchTerm(term);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      style: {\n        marginBottom: '10px'\n      },\n      type: \"text\",\n      placeholder: \"Search by label or temperature\",\n      value: searchTerm,\n      onChange: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef,\n      style: {\n        width: '100%',\n        height: '300px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(LineGraph, \"EbNGuBDsLQctbdMr+M0w2pbuVT4=\");\n_c = LineGraph;\nexport default LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","jsxDEV","_jsxDEV","LineGraph","props","_s","graphData","setGraphData","searchTerm","setSearchTerm","lineGraph","chartRef","chartInstance","labels","map","item","data","timestamp","split","temperatureData","indoorTemperature10xF","searchRegex","RegExp","filter","label","test","toString","ctx","current","getContext","destroy","type","datasets","fill","borderColor","getRandomColor","tension","options","maintainAspectRatio","scales","y","beginAtZero","letters","color","i","Math","floor","random","handleSearch","e","term","target","value","children","style","marginBottom","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","ref","width","height","_c","$RefreshReg$"],"sources":["C:/Users/madhavi.katika/Downloads/first-task1/first-task1-main/src/Components/LineGraph.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import { Chart } from 'chart.js/auto';\r\n\r\n// const LineGraph = (props) => {\r\n//   let  [graphData,setGraphData]=useState([])\r\n//   useEffect(()=>{\r\n//     setGraphData([...props.lineGraph])\r\n//   },[props.lineGraph])\r\n//   console.log(graphData)\r\n//   const chartRef = useRef(null);\r\n//   const chartInstance = useRef(null);\r\n// let label=graphData.map((item)=>item.data.timestamp.split(\"T\")[0])\r\n\r\n// console.log(\"temp\",graphData.map((item) => item.data.indoorTemperature10xF))\r\n// console.log(label)\r\n//   useEffect(() => {\r\n//     const ctx = chartRef.current.getContext('2d');\r\n\r\n//     if (chartInstance.current) {\r\n//       chartInstance.current.destroy();\r\n//     }\r\n\r\n//     const labels = graphData.map((item)=>item.data.timestamp.split(\"T\")[0]);\r\n   \r\n//     const datasets = graphData.map((item) => ({\r\n//       label: item.data.indoorTemperature10xF,\r\n//       data: graphData.map((item) => item.data.indoorTemperature10xF),\r\n//       fill: false,\r\n//       borderColor: getRandomColor(),\r\n//       tension: 0.1,\r\n      \r\n//     }));\r\n\r\n//     chartInstance.current = new Chart(ctx, {\r\n//       type: 'line',\r\n//       data: {\r\n//         labels: labels,\r\n//         datasets: datasets,\r\n//       },\r\n//       options: {\r\n//         maintainAspectRatio:true,\r\n//         scales: {\r\n          \r\n//           y: {\r\n//             beginAtZero: false,\r\n//           },\r\n//         },\r\n//       },\r\n//     });\r\n//   }, [props.lineGraph]);\r\n\r\n//   const getRandomColor = () => {\r\n//     const letters = '0123456789ABCDEF';\r\n//     let color = '#';\r\n//     for (let i = 0; i < 6; i++) {\r\n//       color += letters[Math.floor(Math.random() * 16)];\r\n//     }\r\n//     return color;\r\n//   };\r\n\r\n//   return <canvas ref={chartRef} style={{ width: '10%', height: '10%' }} />;\r\n// };\r\n\r\n// export default LineGraph;\r\n\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Chart } from 'chart.js/auto';\r\n\r\nconst LineGraph = (props) => {\r\n  const [graphData, setGraphData] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  useEffect(() => {\r\n    setGraphData([...props.lineGraph]);\r\n  }, [props.lineGraph]);\r\n\r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\n\r\n  let labels = graphData.map((item) => item.data.timestamp.split('T')[0]);\r\n  let temperatureData = graphData.map((item) => item.data.indoorTemperature10xF);\r\n\r\n  if (searchTerm) {\r\n    const searchRegex = new RegExp(searchTerm, 'i');\r\n    labels = labels.filter((label) => searchRegex.test(label));\r\n    temperatureData = temperatureData.filter((data) => searchRegex.test(data.toString()));\r\n  }\r\n\r\n  useEffect(() => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n\r\n    chartInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            label: 'Indoor Temperature (10xF)',\r\n            data: temperatureData,\r\n            fill: false,\r\n            borderColor: getRandomColor(),\r\n            tension: 0.1,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        maintainAspectRatio: true,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: false,\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }, [graphData, searchTerm]);\r\n\r\n  const getRandomColor = () => {\r\n    const letters = '0123456789ABCDEF';\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  };\r\n\r\n  const handleSearch = (e) => {\r\n    const term = e.target.value;\r\n    setSearchTerm(term);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        style={{ marginBottom: '10px' }}\r\n        type=\"text\"\r\n        placeholder=\"Search by label or temperature\"\r\n        value={searchTerm}\r\n        onChange={handleSearch}\r\n      />\r\n      <canvas ref={chartRef} style={{ width: '100%', height: '300px' }} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineGraph;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}