{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhavi.katika\\\\Downloads\\\\first-task1\\\\first-task1-main\\\\src\\\\Components\\\\scrollbar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SliderWithDate = () => {\n  _s();\n  const [scrollPercentage, setScrollPercentage] = useState(0);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  useEffect(() => {\n    const maxScroll = sliderRef.current.scrollWidth - sliderContainerRef.current.clientWidth;\n    const percentage = sliderContainerRef.current.scrollLeft / maxScroll * 100;\n    setScrollPercentage(percentage);\n    const startDate = new Date('2022-11-07');\n    const endDate = new Date('2022-12-02');\n    const timeDiff = endDate.getTime() - startDate.getTime();\n    const dayDiff = Math.round(timeDiff / (1000 * 3600 * 24) * (sliderContainerRef.current.scrollLeft / maxScroll));\n    const updatedDate = new Date(startDate);\n    updatedDate.setDate(startDate.getDate() + dayDiff);\n    setCurrentDate(updatedDate);\n  }, []);\n  const sliderContainerRef = React.useRef(null);\n  const sliderRef = React.useRef(null);\n  const handleScroll = () => {\n    const maxScroll = sliderRef.current.scrollWidth - sliderContainerRef.current.clientWidth;\n    const percentage = sliderContainerRef.current.scrollLeft / maxScroll * 100;\n    setScrollPercentage(percentage);\n    const startDate = new Date('2022-11-07');\n    const endDate = new Date('2022-12-02');\n    const timeDiff = endDate.getTime() - startDate.getTime();\n    const dayDiff = Math.round(timeDiff / (1000 * 3600 * 24) * (sliderContainerRef.current.scrollLeft / maxScroll));\n    const updatedDate = new Date(startDate);\n    updatedDate.setDate(startDate.getDate() + dayDiff);\n    setCurrentDate(updatedDate);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider-container\",\n      ref: sliderContainerRef,\n      onScroll: handleScroll,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider\",\n        ref: sliderRef,\n        style: {\n          backgroundColor: `hsl(${scrollPercentage}, 50%, 50%)`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date-display\",\n      children: currentDate.toDateString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(SliderWithDate, \"tfuPmcRhfqZhjMVHpX9cnRGHqTo=\");\n_c = SliderWithDate;\nexport default SliderWithDate;\nvar _c;\n$RefreshReg$(_c, \"SliderWithDate\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","SliderWithDate","_s","scrollPercentage","setScrollPercentage","currentDate","setCurrentDate","Date","maxScroll","sliderRef","current","scrollWidth","sliderContainerRef","clientWidth","percentage","scrollLeft","startDate","endDate","timeDiff","getTime","dayDiff","Math","round","updatedDate","setDate","getDate","useRef","handleScroll","children","className","ref","onScroll","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","toDateString","_c","$RefreshReg$"],"sources":["C:/Users/madhavi.katika/Downloads/first-task1/first-task1-main/src/Components/scrollbar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst SliderWithDate = () => {\r\n  const [scrollPercentage, setScrollPercentage] = useState(0);\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    const maxScroll = sliderRef.current.scrollWidth - sliderContainerRef.current.clientWidth;\r\n    const percentage = (sliderContainerRef.current.scrollLeft / maxScroll) * 100;\r\n    setScrollPercentage(percentage);\r\n\r\n    const startDate = new Date('2022-11-07');\r\n    const endDate = new Date('2022-12-02');\r\n    const timeDiff = endDate.getTime() - startDate.getTime();\r\n    const dayDiff = Math.round((timeDiff / (1000 * 3600 * 24)) * (sliderContainerRef.current.scrollLeft / maxScroll));\r\n    const updatedDate = new Date(startDate);\r\n    updatedDate.setDate(startDate.getDate() + dayDiff);\r\n    setCurrentDate(updatedDate);\r\n  }, []);\r\n\r\n  const sliderContainerRef = React.useRef(null);\r\n  const sliderRef = React.useRef(null);\r\n\r\n  const handleScroll = () => {\r\n    const maxScroll = sliderRef.current.scrollWidth - sliderContainerRef.current.clientWidth;\r\n    const percentage = (sliderContainerRef.current.scrollLeft / maxScroll) * 100;\r\n    setScrollPercentage(percentage);\r\n\r\n    const startDate = new Date('2022-11-07');\r\n    const endDate = new Date('2022-12-02');\r\n    const timeDiff = endDate.getTime() - startDate.getTime();\r\n    const dayDiff = Math.round((timeDiff / (1000 * 3600 * 24)) * (sliderContainerRef.current.scrollLeft / maxScroll));\r\n    const updatedDate = new Date(startDate);\r\n    updatedDate.setDate(startDate.getDate() + dayDiff);\r\n    setCurrentDate(updatedDate);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"slider-container\"\r\n        ref={sliderContainerRef}\r\n        onScroll={handleScroll}\r\n      >\r\n        <div\r\n          className=\"slider\"\r\n          ref={sliderRef}\r\n          style={{ backgroundColor: `hsl(${scrollPercentage}, 50%, 50%)` }}\r\n        ></div>\r\n      </div>\r\n\r\n      <div className=\"date-display\">{currentDate.toDateString()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SliderWithDate;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}