{"ast":null,"code":"// import React, { useEffect, useRef, useState } from 'react';\n// import { Chart } from 'chart.js/auto';\n\n// const LineGraph = (props) => {\n//   let  [graphData,setGraphData]=useState([])\n//   useEffect(()=>{\n//     setGraphData([...props.lineGraph])\n//   },[props.lineGraph])\n//   console.log(graphData)\n//   const chartRef = useRef(null);\n//   const chartInstance = useRef(null);\n// let label=graphData.map((item)=>item.data.timestamp.split(\"T\")[0])\n\n// console.log(\"temp\",graphData.map((item) => item.data.indoorTemperature10xF))\n// console.log(label)\n//   useEffect(() => {\n//     const ctx = chartRef.current.getContext('2d');\n\n//     if (chartInstance.current) {\n//       chartInstance.current.destroy();\n//     }\n\n//     const labels = graphData.map((item)=>item.data.timestamp.split(\"T\")[0]);\n\n//     const datasets = graphData.map((item) => ({\n//       label: item.data.indoorTemperature10xF,\n//       data: graphData.map((item) => item.data.indoorTemperature10xF),\n//       fill: false,\n//       borderColor: getRandomColor(),\n//       tension: 0.1,\n\n//     }));\n\n//     chartInstance.current = new Chart(ctx, {\n//       type: 'line',\n//       data: {\n//         labels: labels,\n//         datasets: datasets,\n//       },\n//       options: {\n//         maintainAspectRatio:true,\n//         scales: {\n\n//           y: {\n//             beginAtZero: false,\n//           },\n//         },\n//       },\n//     });\n//   }, [props.lineGraph]);\n\n//   const getRandomColor = () => {\n//     const letters = '0123456789ABCDEF';\n//     let color = '#';\n//     for (let i = 0; i < 6; i++) {\n//       color += letters[Math.floor(Math.random() * 16)];\n//     }\n//     return color;\n//   };\n\n//   return <canvas ref={chartRef} style={{ width: '10%', height: '10%' }} />;\n// };\n\n// export default LineGraph;\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import { Chart } from 'chart.js/auto';\n\n// const LineGraph = (props) => {\n//   const [graphData, setGraphData] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState('');\n\n//   useEffect(() => {\n//     setGraphData([...props.lineGraph]);\n//   }, [props.lineGraph]);\n\n//   const chartRef = useRef(null);\n//   const chartInstance = useRef(null);\n\n//   let labels = graphData.map((item) => item.data.timestamp.split('T')[0]);\n//   let temperatureData = graphData.map((item) => item.data.indoorTemperature10xF);\n\n//   if (searchTerm) {\n//     const searchRegex = new RegExp(searchTerm, 'i');\n//     labels = labels.filter((label) => searchRegex.test(label));\n//     temperatureData = temperatureData.filter((data) => searchRegex.test(data.toString()));\n//   }\n\n//   useEffect(() => {\n//     const ctx = chartRef.current.getContext('2d');\n\n//     if (chartInstance.current) {\n//       chartInstance.current.destroy();\n//     }\n\n//     chartInstance.current = new Chart(ctx, {\n//       type: 'line',\n//       data: {\n//         labels: labels,\n//         datasets: [\n//           {\n//             label: 'Indoor Temperature (10xF)',\n//             data: temperatureData,\n//             fill: false,\n//             borderColor: getRandomColor(),\n//             tension: 0.1,\n//           },\n//         ],\n//       },\n//       options: {\n//         maintainAspectRatio: true,\n//         scales: {\n//           y: {\n//             beginAtZero: false,\n//           },\n//         },\n//       },\n//     });\n//   }, [graphData, searchTerm]);\n\n//   const getRandomColor = () => {\n//     const letters = '0123456789ABCDEF';\n//     let color = '#';\n//     for (let i = 0; i < 6; i++) {\n//       color += letters[Math.floor(Math.random() * 16)];\n//     }\n//     return color;\n//   };\n\n//   const handleSearch = (e) => {\n//     const term = e.target.value;\n//     setSearchTerm(term);\n//   };\n\n//   return (\n//     <div>\n//       <input\n//         style={{ marginBottom: '10px' }}\n//         type=\"text\"\n//         placeholder=\"Search by label or temperature\"\n//         value={searchTerm}\n//         onChange={handleSearch}\n//       />\n//       <canvas ref={chartRef} style={{ width: '100%', height: '300px' }} />\n//     </div>\n//   );\n// };\n\n// export default LineGraph;","map":{"version":3,"names":[],"sources":["C:/Users/madhavi.katika/Downloads/first-task1/first-task1-main/src/Components/LineGraph.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import { Chart } from 'chart.js/auto';\r\n\r\n// const LineGraph = (props) => {\r\n//   let  [graphData,setGraphData]=useState([])\r\n//   useEffect(()=>{\r\n//     setGraphData([...props.lineGraph])\r\n//   },[props.lineGraph])\r\n//   console.log(graphData)\r\n//   const chartRef = useRef(null);\r\n//   const chartInstance = useRef(null);\r\n// let label=graphData.map((item)=>item.data.timestamp.split(\"T\")[0])\r\n\r\n// console.log(\"temp\",graphData.map((item) => item.data.indoorTemperature10xF))\r\n// console.log(label)\r\n//   useEffect(() => {\r\n//     const ctx = chartRef.current.getContext('2d');\r\n\r\n//     if (chartInstance.current) {\r\n//       chartInstance.current.destroy();\r\n//     }\r\n\r\n//     const labels = graphData.map((item)=>item.data.timestamp.split(\"T\")[0]);\r\n   \r\n//     const datasets = graphData.map((item) => ({\r\n//       label: item.data.indoorTemperature10xF,\r\n//       data: graphData.map((item) => item.data.indoorTemperature10xF),\r\n//       fill: false,\r\n//       borderColor: getRandomColor(),\r\n//       tension: 0.1,\r\n      \r\n//     }));\r\n\r\n//     chartInstance.current = new Chart(ctx, {\r\n//       type: 'line',\r\n//       data: {\r\n//         labels: labels,\r\n//         datasets: datasets,\r\n//       },\r\n//       options: {\r\n//         maintainAspectRatio:true,\r\n//         scales: {\r\n          \r\n//           y: {\r\n//             beginAtZero: false,\r\n//           },\r\n//         },\r\n//       },\r\n//     });\r\n//   }, [props.lineGraph]);\r\n\r\n//   const getRandomColor = () => {\r\n//     const letters = '0123456789ABCDEF';\r\n//     let color = '#';\r\n//     for (let i = 0; i < 6; i++) {\r\n//       color += letters[Math.floor(Math.random() * 16)];\r\n//     }\r\n//     return color;\r\n//   };\r\n\r\n//   return <canvas ref={chartRef} style={{ width: '10%', height: '10%' }} />;\r\n// };\r\n\r\n// export default LineGraph;\r\n\r\n\r\n// import React, { useEffect, useRef, useState } from 'react';\r\n// import { Chart } from 'chart.js/auto';\r\n\r\n// const LineGraph = (props) => {\r\n//   const [graphData, setGraphData] = useState([]);\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     setGraphData([...props.lineGraph]);\r\n//   }, [props.lineGraph]);\r\n\r\n//   const chartRef = useRef(null);\r\n//   const chartInstance = useRef(null);\r\n\r\n//   let labels = graphData.map((item) => item.data.timestamp.split('T')[0]);\r\n//   let temperatureData = graphData.map((item) => item.data.indoorTemperature10xF);\r\n\r\n//   if (searchTerm) {\r\n//     const searchRegex = new RegExp(searchTerm, 'i');\r\n//     labels = labels.filter((label) => searchRegex.test(label));\r\n//     temperatureData = temperatureData.filter((data) => searchRegex.test(data.toString()));\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     const ctx = chartRef.current.getContext('2d');\r\n\r\n//     if (chartInstance.current) {\r\n//       chartInstance.current.destroy();\r\n//     }\r\n\r\n//     chartInstance.current = new Chart(ctx, {\r\n//       type: 'line',\r\n//       data: {\r\n//         labels: labels,\r\n//         datasets: [\r\n//           {\r\n//             label: 'Indoor Temperature (10xF)',\r\n//             data: temperatureData,\r\n//             fill: false,\r\n//             borderColor: getRandomColor(),\r\n//             tension: 0.1,\r\n//           },\r\n//         ],\r\n//       },\r\n//       options: {\r\n//         maintainAspectRatio: true,\r\n//         scales: {\r\n//           y: {\r\n//             beginAtZero: false,\r\n//           },\r\n//         },\r\n//       },\r\n//     });\r\n//   }, [graphData, searchTerm]);\r\n\r\n//   const getRandomColor = () => {\r\n//     const letters = '0123456789ABCDEF';\r\n//     let color = '#';\r\n//     for (let i = 0; i < 6; i++) {\r\n//       color += letters[Math.floor(Math.random() * 16)];\r\n//     }\r\n//     return color;\r\n//   };\r\n\r\n//   const handleSearch = (e) => {\r\n//     const term = e.target.value;\r\n//     setSearchTerm(term);\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <input\r\n//         style={{ marginBottom: '10px' }}\r\n//         type=\"text\"\r\n//         placeholder=\"Search by label or temperature\"\r\n//         value={searchTerm}\r\n//         onChange={handleSearch}\r\n//       />\r\n//       <canvas ref={chartRef} style={{ width: '100%', height: '300px' }} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default LineGraph;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}