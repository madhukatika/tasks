{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhavi.katika\\\\Downloads\\\\first-task1\\\\first-task1-main\\\\src\\\\Components\\\\SearchData\\\\index.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useContext } from \"react\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import mergeData from \"../../json_data/merged_file.json\";\n// import Displaytable from \"../Displaytable\";\n// import Gdata from \"../GobalContext\";\n// import { Slide, Slider } from '@mui/material';\n\n// const SearchComponent = () => {\n//   let gdata = useContext(Gdata);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [selectedTime, setSelectedTime] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n\n//   useEffect(() => {\n//     performSearch(searchTerm, selectedDate, selectedTime);\n//   }, [searchTerm, selectedDate, selectedTime]);\n\n//   useEffect(() => {\n//     gdata.update(graph);\n//   }, [searchResults]);\n\n//   const handleSearch = (e) => {\n//     const term = e.target.value;\n//     setSearchTerm(term);\n//   };\n\n//   const handleDateChange = (date) => {\n//     setSelectedDate(date);\n//   };\n\n//   const handleTimeChange = (e) => {\n//     const time = e.target.value;\n//     setSelectedTime(time);\n//   };\n//   const performSearch = (term, date, time) => {\n//     const results = mergeData.filter((item) => {\n//       if (item?.thermostatPacket?.info && item?.thermostatPacket?.config && item?.thermostatPacket?.data && item?.thermostatPacket?.settings) {\n//         const { product, id } = item.thermostatPacket.info;\n//         const { programMode } = item.thermostatPacket.config;\n//         const { hvacMode } = item.thermostatPacket.settings;\n//         const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n//         if (!date && !time) {\n//           // When no date and time are selected, include all items\n//           return (\n//             product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())\n//           );\n//         } else if (date && !time) {\n//           // When only date is selected, filter by date\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toDateString() === date.toDateString()\n//           );\n//         } else if (!date && time) {\n//           // When only time is selected, filter by time\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//           );\n//         } else {\n//           // When both date and time are selected, filter by date and time\n//           const selectedDateTime = new Date(date.toDateString() + \" \" + time);\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.getTime() === selectedDateTime.getTime()\n//           );\n//         }\n//       }\n//     });\n\n//     setSearchResults(results);\n//   };\n//   var graph = searchResults.map((item, index) => item.thermostatPacket);\n//   return (\n//     <div>\n//       <div>\n//       <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search product\"\n//         value={searchTerm}\n//         onChange={handleSearch}\n//       />\n//       <DatePicker\n//         style={{ width: \"30%\", height: \"3vh\" }}\n//         selected={selectedDate}\n//         onChange={handleDateChange}\n//         placeholderText=\"mm/dd/yyyy\"\n//         dateFormat=\"MM/dd/yyyy\"\n//       />\n//             <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search time (ISO format)\"\n//         value={selectedTime}\n//         onChange={handleTimeChange}\n//       />\n//       <Slider sx={{maxWidth:'465px'}}\n//   aria-label=\"Temperature\"\n//   defaultValue={0}\n//   min={10}\n//   // getAriaValueText={valuetext}\n\n//   color=\"secondary\"\n// />\n\n//   <div className=\"table-container\">\n//       <table className=\"custom_table\">\n//         <thead>\n//           <tr>\n//             <th>date</th>\n//             <th>time</th>\n//             <th>product</th>\n//             <th>version</th>\n//             <th>id</th>\n//             <th>hvacMode</th>\n//             <th>deadband10xF</th>\n//             <th>outdoorTempLockout10xF</th>\n//             <th>programMode</th>\n//             <th>fanMode</th>\n//             <th>numHeatStages</th>\n//             <th>numCompressorStages</th>\n//             <th>numHeatStages</th>\n//             <th>smartSensorCnt</th>\n//             <th>outdoorTemperature10xF</th>\n//             <th>indoorTemperature10xF</th>\n//             <th>outdoorHumidityPer</th>\n//             <th>indoorHumidityPer</th>\n//           </tr>\n//         </thead>\n//         {searchResults.map((item, index) => (\n//           <Displaytable data={item} key={index} />\n//         ))}\n//       </table>\n//       </div>\n//       </div>\n\n//     </div>\n//   );\n// };\n\n// export default SearchComponent;\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport mergeData from \"../../json_data/merged_file.json\";\nimport Displaytable from \"../Displaytable\";\nimport Gdata from \"../GobalContext\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchComponent = () => {\n  _s();\n  let gdata = useContext(Gdata);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [selectedTime, setSelectedTime] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [startDate, setStartDate] = useState(new Date());\n  const [endDate, setEndDate] = useState(new Date());\n  useEffect(() => {\n    performSearch(searchTerm, startDate, endDate, selectedTime);\n  }, [searchTerm, startDate, endDate, selectedTime]);\n  useEffect(() => {\n    gdata.update(graph);\n  }, [searchResults]);\n  const handleSearch = e => {\n    const term = e.target.value;\n    setSearchTerm(term);\n  };\n  const handleDateRangeChange = values => {\n    setStartDate(new Date(values[0]));\n    setEndDate(new Date(values[1]));\n    console.log(startDate);\n    console.log(endDate);\n  };\n\n  // const handleDateChange = (date) => {\n\n  //   setSelectedDate(date);\n\n  // };\n\n  const handleTimeChange = e => {\n    const time = e.target.value;\n    setSelectedTime(time);\n  };\n\n  // const performSearch = (term, startDate, endDate, time) => {\n  //   const results = mergeData.filter((item) => {\n  //     if (\n  //       item?.thermostatPacket?.info &&\n  //       item?.thermostatPacket?.config &&\n  //       item?.thermostatPacket?.data &&\n  //       item?.thermostatPacket?.settings\n  //     ) {\n  //       const { product, id } = item.thermostatPacket.info;\n  //       const { programMode } = item.thermostatPacket.config;\n  //       const { hvacMode } = item.thermostatPacket.settings;\n  //       const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n  //       if (!startDate && !endDate && !time) {\n  //         // When no date range and time are selected, include all items\n\n  //         return (\n  //           product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //           programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //           hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //           id?.toLowerCase()?.includes(term?.toLowerCase())\n  //         );\n  //       } else if (!startDate && !endDate && time) {\n  //         // When only time is selected, filter by time\n\n  //         return (\n  //           (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n  //           timestamp.toISOString().split(\"T\")[1].startsWith(time)\n  //         );\n  //       } else if (startDate && endDate && !time) {\n  //         // When only date range is selected, filter by date range\n\n  //         return (\n  //           (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n  //           timestamp >= startDate &&\n  //           timestamp <= endDate\n  //         );\n  //       } else {\n  //         // When both date range and time are selected, filter by date range and time\n\n  //         const selectedDateTime = new Date(\n  //           startDate.toDateString() + \" \" + time\n  //         );\n\n  //         return (\n  //           (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n  //           timestamp >= startDate &&\n  //           timestamp <= endDate &&\n  //           timestamp.getTime() === selectedDateTime.getTime()\n  //         );\n  //       }\n  //     }\n  //   });\n\n  //   setSearchResults(results);\n  // };\n\n  var graph = searchResults.map((item, index) => item.thermostatPacket);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          width: \"30%\",\n          height: \"3vh\",\n          padding: \"5px\",\n          marginBottom: \"5px\"\n        },\n        type: \"text\",\n        className: \"search-bar\",\n        placeholder: \"Search product\",\n        value: searchTerm,\n        onChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          width: \"30%\",\n          height: \"3vh\",\n          padding: \"5px\",\n          marginBottom: \"5px\"\n        },\n        type: \"text\",\n        className: \"search-bar\",\n        placeholder: \"Search time (ISO format)\",\n        value: selectedTime,\n        onChange: handleTimeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Start Date: \", startDate.toDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"End Date: \", endDate.toDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        min: new Date(2022, 10, 7).getTime(),\n        max: new Date(2022, 11, 2).getTime()\n        // defaultValue={[startDate.getTime(), endDate.getTime()]}\n        ,\n        onChange: handleDateRangeChange,\n        range: true,\n        allowCross: false,\n        style: {\n          width: \"50%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"custom_table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"product\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"version\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"id\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"hvacMode\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"deadband10xF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"outdoorTempLockout10xF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"programMode\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"fanMode\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"numHeatStages\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"numCompressorStages\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"numHeatStages\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"smartSensorCnt\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"outdoorTemperature10xF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"indoorTemperature10xF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"outdoorHumidityPer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"indoorHumidityPer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }, this), searchResults.map((item, index) => /*#__PURE__*/_jsxDEV(Displaytable, {\n            data: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchComponent, \"U6v7VqUAPZGFB8d98Kb340d9VeU=\");\n_c = SearchComponent;\nexport default SearchComponent;\nvar _c;\n$RefreshReg$(_c, \"SearchComponent\");","map":{"version":3,"names":["React","useState","useEffect","useContext","mergeData","Displaytable","Gdata","Slider","jsxDEV","_jsxDEV","SearchComponent","_s","gdata","searchTerm","setSearchTerm","selectedDate","setSelectedDate","selectedTime","setSelectedTime","searchResults","setSearchResults","startDate","setStartDate","Date","endDate","setEndDate","performSearch","update","graph","handleSearch","e","term","target","value","handleDateRangeChange","values","console","log","handleTimeChange","time","map","item","index","thermostatPacket","children","style","width","height","padding","marginBottom","type","className","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","toDateString","min","getTime","max","range","allowCross","data","_c","$RefreshReg$"],"sources":["C:/Users/madhavi.katika/Downloads/first-task1/first-task1-main/src/Components/SearchData/index.js"],"sourcesContent":["// import React, { useState, useEffect, useContext } from \"react\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import mergeData from \"../../json_data/merged_file.json\";\n// import Displaytable from \"../Displaytable\";\n// import Gdata from \"../GobalContext\";\n// import { Slide, Slider } from '@mui/material';\n\n// const SearchComponent = () => {\n//   let gdata = useContext(Gdata);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [selectedTime, setSelectedTime] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n\n//   useEffect(() => {\n//     performSearch(searchTerm, selectedDate, selectedTime);\n//   }, [searchTerm, selectedDate, selectedTime]);\n\n//   useEffect(() => {\n//     gdata.update(graph);\n//   }, [searchResults]);\n\n//   const handleSearch = (e) => {\n//     const term = e.target.value;\n//     setSearchTerm(term);\n//   };\n\n//   const handleDateChange = (date) => {\n//     setSelectedDate(date);\n//   };\n\n//   const handleTimeChange = (e) => {\n//     const time = e.target.value;\n//     setSelectedTime(time);\n//   };\n//   const performSearch = (term, date, time) => {\n//     const results = mergeData.filter((item) => {\n//       if (item?.thermostatPacket?.info && item?.thermostatPacket?.config && item?.thermostatPacket?.data && item?.thermostatPacket?.settings) {\n//         const { product, id } = item.thermostatPacket.info;\n//         const { programMode } = item.thermostatPacket.config;\n//         const { hvacMode } = item.thermostatPacket.settings;\n//         const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n//         if (!date && !time) {\n//           // When no date and time are selected, include all items\n//           return (\n//             product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())\n//           );\n//         } else if (date && !time) {\n//           // When only date is selected, filter by date\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toDateString() === date.toDateString()\n//           );\n//         } else if (!date && time) {\n//           // When only time is selected, filter by time\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//           );\n//         } else {\n//           // When both date and time are selected, filter by date and time\n//           const selectedDateTime = new Date(date.toDateString() + \" \" + time);\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.getTime() === selectedDateTime.getTime()\n//           );\n//         }\n//       }\n//     });\n\n//     setSearchResults(results);\n//   };\n//   var graph = searchResults.map((item, index) => item.thermostatPacket);\n//   return (\n//     <div>\n//       <div>\n//       <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search product\"\n//         value={searchTerm}\n//         onChange={handleSearch}\n//       />\n//       <DatePicker\n//         style={{ width: \"30%\", height: \"3vh\" }}\n//         selected={selectedDate}\n//         onChange={handleDateChange}\n//         placeholderText=\"mm/dd/yyyy\"\n//         dateFormat=\"MM/dd/yyyy\"\n//       />\n//             <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search time (ISO format)\"\n//         value={selectedTime}\n//         onChange={handleTimeChange}\n//       />\n//       <Slider sx={{maxWidth:'465px'}}\n//   aria-label=\"Temperature\"\n//   defaultValue={0}\n//   min={10}\n//   // getAriaValueText={valuetext}\n\n//   color=\"secondary\"\n// />\n\n//   <div className=\"table-container\">\n//       <table className=\"custom_table\">\n//         <thead>\n//           <tr>\n//             <th>date</th>\n//             <th>time</th>\n//             <th>product</th>\n//             <th>version</th>\n//             <th>id</th>\n//             <th>hvacMode</th>\n//             <th>deadband10xF</th>\n//             <th>outdoorTempLockout10xF</th>\n//             <th>programMode</th>\n//             <th>fanMode</th>\n//             <th>numHeatStages</th>\n//             <th>numCompressorStages</th>\n//             <th>numHeatStages</th>\n//             <th>smartSensorCnt</th>\n//             <th>outdoorTemperature10xF</th>\n//             <th>indoorTemperature10xF</th>\n//             <th>outdoorHumidityPer</th>\n//             <th>indoorHumidityPer</th>\n//           </tr>\n//         </thead>\n//         {searchResults.map((item, index) => (\n//           <Displaytable data={item} key={index} />\n//         ))}\n//       </table>\n//       </div>\n//       </div>\n\n//     </div>\n//   );\n// };\n\n// export default SearchComponent;\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport mergeData from \"../../json_data/merged_file.json\";\nimport Displaytable from \"../Displaytable\";\nimport Gdata from \"../GobalContext\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst SearchComponent = () => {\n  let gdata = useContext(Gdata);\nconst [searchTerm, setSearchTerm] = useState(\"\");\nconst [selectedDate, setSelectedDate] = useState(null);\nconst [selectedTime, setSelectedTime] = useState(\"\");\nconst [searchResults, setSearchResults] = useState([]);\nconst [startDate, setStartDate] = useState(new Date());\nconst [endDate, setEndDate] = useState(new Date());\n\n  useEffect(() => {\n    performSearch(searchTerm, startDate, endDate, selectedTime);\n  }, [searchTerm, startDate, endDate, selectedTime]);\n\n  useEffect(() => {\n    gdata.update(graph);\n  }, [searchResults]);\n\n  const handleSearch = (e) => {\n    const term = e.target.value;\n\n    setSearchTerm(term);\n  };\n\n  const handleDateRangeChange = (values) => {\n    setStartDate(new Date(values[0]));\n\n    setEndDate(new Date(values[1]));\n\n    console.log(startDate);\n\n    console.log(endDate);\n  };\n\n  // const handleDateChange = (date) => {\n\n  //   setSelectedDate(date);\n\n  // };\n\n  const handleTimeChange = (e) => {\n    const time = e.target.value;\n\n    setSelectedTime(time);\n  };\n\n  // const performSearch = (term, startDate, endDate, time) => {\n  //   const results = mergeData.filter((item) => {\n  //     if (\n  //       item?.thermostatPacket?.info &&\n  //       item?.thermostatPacket?.config &&\n  //       item?.thermostatPacket?.data &&\n  //       item?.thermostatPacket?.settings\n  //     ) {\n  //       const { product, id } = item.thermostatPacket.info;\n  //       const { programMode } = item.thermostatPacket.config;\n  //       const { hvacMode } = item.thermostatPacket.settings;\n  //       const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n  //       if (!startDate && !endDate && !time) {\n  //         // When no date range and time are selected, include all items\n\n  //         return (\n  //           product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //           programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //           hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //           id?.toLowerCase()?.includes(term?.toLowerCase())\n  //         );\n  //       } else if (!startDate && !endDate && time) {\n  //         // When only time is selected, filter by time\n\n  //         return (\n  //           (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n  //           timestamp.toISOString().split(\"T\")[1].startsWith(time)\n  //         );\n  //       } else if (startDate && endDate && !time) {\n  //         // When only date range is selected, filter by date range\n\n  //         return (\n  //           (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n  //           timestamp >= startDate &&\n  //           timestamp <= endDate\n  //         );\n  //       } else {\n  //         // When both date range and time are selected, filter by date range and time\n\n  //         const selectedDateTime = new Date(\n  //           startDate.toDateString() + \" \" + time\n  //         );\n\n  //         return (\n  //           (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n  //             id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n  //           timestamp >= startDate &&\n  //           timestamp <= endDate &&\n  //           timestamp.getTime() === selectedDateTime.getTime()\n  //         );\n  //       }\n  //     }\n  //   });\n\n  //   setSearchResults(results);\n  // };\n\n  var graph = searchResults.map((item, index) => item.thermostatPacket);\n\n  return (\n    <div>\n      <div>\n        <input\n          style={{\n            width: \"30%\",\n\n            height: \"3vh\",\n\n            padding: \"5px\",\n\n            marginBottom: \"5px\",\n          }}\n          type=\"text\"\n          className=\"search-bar\"\n          placeholder=\"Search product\"\n          value={searchTerm}\n          onChange={handleSearch}\n        />\n\n        {/* <DatePicker\n\n        style={{ width: \"30%\", height: \"3vh\" }}\n\n        selected={selectedDate}\n\n        onChange={handleDateChange}\n\n        placeholderText=\"mm/dd/yyyy\"\n\n        dateFormat=\"MM/dd/yyyy\"\n\n      /> */}\n\n        <input\n          style={{\n            width: \"30%\",\n\n            height: \"3vh\",\n\n            padding: \"5px\",\n\n            marginBottom: \"5px\",\n          }}\n          type=\"text\"\n          className=\"search-bar\"\n          placeholder=\"Search time (ISO format)\"\n          value={selectedTime}\n          onChange={handleTimeChange}\n        />\n\n        {/* <Slider sx={{maxWidth:'465px'}}\n\n  aria-label=\"Temperature\"\n\n  defaultValue={0}\n\n  min={10}\n\n  // getAriaValueText={valuetext}\n\n  color=\"secondary\"\n\n/> */}\n\n       \n\n        <div>Start Date: {startDate.toDateString()}</div>\n\n        <div>End Date: {endDate.toDateString()}</div>\n\n        <Slider\n          min={new Date(2022, 10, 7).getTime()}\n          max={new Date(2022, 11, 2).getTime()}\n          // defaultValue={[startDate.getTime(), endDate.getTime()]}\n          onChange={handleDateRangeChange}\n          range\n          allowCross={false}\n          style={{ width: \"50%\" }}\n        />\n\n      \n\n        <div className=\"table-container\">\n          <table className=\"custom_table\">\n            <thead>\n              <tr>\n                <th>date</th>\n\n                <th>time</th>\n\n                <th>product</th>\n\n                <th>version</th>\n\n                <th>id</th>\n\n                <th>hvacMode</th>\n\n                <th>deadband10xF</th>\n\n                <th>outdoorTempLockout10xF</th>\n\n                <th>programMode</th>\n\n                <th>fanMode</th>\n\n                <th>numHeatStages</th>\n\n                <th>numCompressorStages</th>\n\n                <th>numHeatStages</th>\n\n                <th>smartSensorCnt</th>\n\n                <th>outdoorTemperature10xF</th>\n\n                <th>indoorTemperature10xF</th>\n\n                <th>outdoorHumidityPer</th>\n\n                <th>indoorHumidityPer</th>\n              </tr>\n            </thead>\n\n            {searchResults.map((item, index) => (\n              <Displaytable data={item} key={index} />\n            ))}\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchComponent;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC9D,OAAO,4CAA4C;AACnD,OAAOC,SAAS,MAAM,kCAAkC;AACxD,OAAOC,YAAY,MAAM,iBAAiB;AAC1C,OAAOC,KAAK,MAAM,iBAAiB;AACnC,OAAOC,MAAM,MAAM,WAAW;AAC9B,OAAO,4BAA4B;AACnC,OAAO,4CAA4C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,IAAIC,KAAK,GAAGT,UAAU,CAACG,KAAK,CAAC;EAC/B,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}