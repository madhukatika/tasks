{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhavi.katika\\\\Downloads\\\\first-task1\\\\first-task1-main\\\\src\\\\Components\\\\SearchData\\\\index.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useContext } from \"react\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import mergeData from \"../../json_data/merged_file.json\";\n// import Displaytable from \"../Displaytable\";\n// import Gdata from \"../GobalContext\";\n// import { Slide, Slider } from '@mui/material';\n\n// const SearchComponent = () => {\n//   let gdata = useContext(Gdata);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [selectedTime, setSelectedTime] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n\n//   useEffect(() => {\n//     performSearch(searchTerm, selectedDate, selectedTime);\n//   }, [searchTerm, selectedDate, selectedTime]);\n\n//   useEffect(() => {\n//     gdata.update(graph);\n//   }, [searchResults]);\n\n//   const handleSearch = (e) => {\n//     const term = e.target.value;\n//     setSearchTerm(term);\n//   };\n\n//   const handleDateChange = (date) => {\n//     setSelectedDate(date);\n//   };\n\n//   const handleTimeChange = (e) => {\n//     const time = e.target.value;\n//     setSelectedTime(time);\n//   };\n//   const performSearch = (term, date, time) => {\n//     const results = mergeData.filter((item) => {\n//       if (item?.thermostatPacket?.info && item?.thermostatPacket?.config && item?.thermostatPacket?.data && item?.thermostatPacket?.settings) {\n//         const { product, id } = item.thermostatPacket.info;\n//         const { programMode } = item.thermostatPacket.config;\n//         const { hvacMode } = item.thermostatPacket.settings;\n//         const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n//         if (!date && !time) {\n//           // When no date and time are selected, include all items\n//           return (\n//             product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())\n//           );\n//         } else if (date && !time) {\n//           // When only date is selected, filter by date\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toDateString() === date.toDateString()\n//           );\n//         } else if (!date && time) {\n//           // When only time is selected, filter by time\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//           );\n//         } else {\n//           // When both date and time are selected, filter by date and time\n//           const selectedDateTime = new Date(date.toDateString() + \" \" + time);\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.getTime() === selectedDateTime.getTime()\n//           );\n//         }\n//       }\n//     });\n\n//     setSearchResults(results);\n//   };\n//   var graph = searchResults.map((item, index) => item.thermostatPacket);\n//   return (\n//     <div>\n//       <div>\n//       <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search product\"\n//         value={searchTerm}\n//         onChange={handleSearch}\n//       />\n//       <DatePicker\n//         style={{ width: \"30%\", height: \"3vh\" }}\n//         selected={selectedDate}\n//         onChange={handleDateChange}\n//         placeholderText=\"mm/dd/yyyy\"\n//         dateFormat=\"MM/dd/yyyy\"\n//       />\n//             <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search time (ISO format)\"\n//         value={selectedTime}\n//         onChange={handleTimeChange}\n//       />\n//       <Slider sx={{maxWidth:'465px'}}\n//   aria-label=\"Temperature\"\n//   defaultValue={0}\n//   min={10}\n//   // getAriaValueText={valuetext}\n\n//   color=\"secondary\"\n// />\n\n//   <div className=\"table-container\">\n//       <table className=\"custom_table\">\n//         <thead>\n//           <tr>\n//             <th>date</th>\n//             <th>time</th>\n//             <th>product</th>\n//             <th>version</th>\n//             <th>id</th>\n//             <th>hvacMode</th>\n//             <th>deadband10xF</th>\n//             <th>outdoorTempLockout10xF</th>\n//             <th>programMode</th>\n//             <th>fanMode</th>\n//             <th>numHeatStages</th>\n//             <th>numCompressorStages</th>\n//             <th>numHeatStages</th>\n//             <th>smartSensorCnt</th>\n//             <th>outdoorTemperature10xF</th>\n//             <th>indoorTemperature10xF</th>\n//             <th>outdoorHumidityPer</th>\n//             <th>indoorHumidityPer</th>\n//           </tr>\n//         </thead>\n//         {searchResults.map((item, index) => (\n//           <Displaytable data={item} key={index} />\n//         ))}\n//       </table>\n//       </div>\n//       </div>\n\n//     </div>\n//   );\n// };\n\n// export default SearchComponent;\n\n// import React, { useState, useEffect, useContext } from \"react\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import mergeData from \"../../json_data/merged_file.json\";\n// import Displaytable from \"../Displaytable\";\n// import Gdata from \"../GobalContext\";\n// import Slider from \"rc-slider\";\n// import \"rc-slider/assets/index.css\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n\n// const SearchComponent = () => {\n//   let gdata = useContext(Gdata);\n\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n\n//   const [selectedDate, setSelectedDate] = useState(null);\n\n//   const [selectedTime, setSelectedTime] = useState(\"\");\n\n//   const [searchResults, setSearchResults] = useState([]);\n\n//   const [startDate, setStartDate] = useState(new Date());\n\n//   const [endDate, setEndDate] = useState(new Date());\n\n//   useEffect(() => {\n//     performSearch(searchTerm, startDate, endDate, selectedTime);\n//   }, [searchTerm, startDate, endDate, selectedTime]);\n\n//   useEffect(() => {\n//     gdata.update(graph);\n//   }, [searchResults]);\n\n//   const handleSearch = (e) => {\n//     const term = e.target.value;\n\n//     setSearchTerm(term);\n//   };\n\n//   const handleDateRangeChange = (values) => {\n//     setStartDate(new Date(values[0]));\n\n//     setEndDate(new Date(values[1]));\n\n//     console.log(startDate);\n\n//     console.log(endDate);\n//   };\n\n//   // const handleDateChange = (date) => {\n\n//   //   setSelectedDate(date);\n\n//   // };\n\n//   const handleTimeChange = (e) => {\n//     const time = e.target.value;\n\n//     setSelectedTime(time);\n//   };\n\n//   const performSearch = (term, startDate, endDate, time) => {\n//     const results = mergeData.filter((item) => {\n//       if (\n//         item?.thermostatPacket?.info &&\n//         item?.thermostatPacket?.config &&\n//         item?.thermostatPacket?.data &&\n//         item?.thermostatPacket?.settings\n//       ) {\n//         const { product, id } = item.thermostatPacket.info;\n//         const { programMode } = item.thermostatPacket.config;\n//         const { hvacMode } = item.thermostatPacket.settings;\n//         const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n//         if (!startDate && !endDate && !time) {\n//           // When no date range and time are selected, include all items\n\n//           return (\n//             product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())\n//           );\n//         } else if (!startDate && !endDate && time) {\n//           // When only time is selected, filter by time\n\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//           );\n//         } else if (startDate && endDate && !time) {\n//           // When only date range is selected, filter by date range\n\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp >= startDate &&\n//             timestamp <= endDate\n//           );\n//         } else {\n//           // When both date range and time are selected, filter by date range and time\n\n//           const selectedDateTime = new Date(\n//             startDate.toDateString() + \" \" + time\n//           );\n\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp >= startDate &&\n//             timestamp <= endDate &&\n//             timestamp.getTime() === selectedDateTime.getTime()\n//           );\n//         }\n//       }\n//     });\n\n//     setSearchResults(results);\n//   };\n\n//   var graph = searchResults.map((item, index) => item.thermostatPacket);\n\n//   return (\n//     <div>\n//       <div>\n//         <input\n//           style={{\n//             width: \"30%\",\n\n//             height: \"3vh\",\n\n//             padding: \"5px\",\n\n//             marginBottom: \"5px\",\n//           }}\n//           type=\"text\"\n//           className=\"search-bar\"\n//           placeholder=\"Search product\"\n//           value={searchTerm}\n//           onChange={handleSearch}\n//         />\n\n//         {/* <DatePicker\n\n//         style={{ width: \"30%\", height: \"3vh\" }}\n\n//         selected={selectedDate}\n\n//         onChange={handleDateChange}\n\n//         placeholderText=\"mm/dd/yyyy\"\n\n//         dateFormat=\"MM/dd/yyyy\"\n\n//       /> */}\n\n//         <input\n//           style={{\n//             width: \"30%\",\n\n//             height: \"3vh\",\n\n//             padding: \"5px\",\n\n//             marginBottom: \"5px\",\n//           }}\n//           type=\"text\"\n//           className=\"search-bar\"\n//           placeholder=\"Search time (ISO format)\"\n//           value={selectedTime}\n//           onChange={handleTimeChange}\n//         />\n\n//         {/* <Slider sx={{maxWidth:'465px'}}\n\n//   aria-label=\"Temperature\"\n\n//   defaultValue={0}\n\n//   min={10}\n\n//   // getAriaValueText={valuetext}\n\n//   color=\"secondary\"\n\n// /> */}\n\n//         <div>Start Date: {startDate.toDateString()}</div>\n\n//         <div>End Date: {endDate.toDateString()}</div>\n\n//         <Slider\n//           min={new Date(2022, 10, 7).getTime()}\n//           max={new Date(2022, 11, 2).getTime()}\n//           // defaultValue={[startDate.getTime(), endDate.getTime()]}\n//           onChange={handleDateRangeChange}\n//           range\n//           allowCross={false}\n//           style={{ width: \"50%\" }}\n//         />\n\n//         <div className=\"table-container\">\n//           <table className=\"custom_table\">\n//             <thead>\n//               <tr>\n//                 <th>date</th>\n\n//                 <th>time</th>\n\n//                 <th>product</th>\n\n//                 <th>version</th>\n\n//                 <th>id</th>\n\n//                 <th>hvacMode</th>\n\n//                 <th>deadband10xF</th>\n\n//                 <th>outdoorTempLockout10xF</th>\n\n//                 <th>programMode</th>\n\n//                 <th>fanMode</th>\n\n//                 <th>numHeatStages</th>\n\n//                 <th>numCompressorStages</th>\n\n//                 <th>numHeatStages</th>\n\n//                 <th>smartSensorCnt</th>\n\n//                 <th>outdoorTemperature10xF</th>\n\n//                 <th>indoorTemperature10xF</th>\n\n//                 <th>outdoorHumidityPer</th>\n\n//                 <th>indoorHumidityPer</th>\n//               </tr>\n//             </thead>\n\n//             {searchResults.map((item, index) => (\n//               <Displaytable data={item} key={index} />\n//             ))}\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SearchComponent;\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport mergeData from \"../../json_data/merged_file.json\";\nimport Displaytable from \"../Displaytable\";\nimport Gdata from \"../GobalContext\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchComponent = () => {\n  _s();\n  let gdata = useContext(Gdata);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [selectedTime, setSelectedTime] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [startDate, setStartDate] = useState(new Date('2022-10-07'));\n  const [endDate, setEndDate] = useState(new Date('2022-11-02'));\n  useEffect(() => {\n    performSearch(searchTerm, startDate, endDate, selectedTime);\n  }, [searchTerm, startDate, endDate, selectedTime]);\n  useEffect(() => {\n    gdata.update(graph);\n  }, [searchResults]);\n  const handleSearch = e => {\n    const term = e.target.value;\n    setSearchTerm(term);\n  };\n  const handleDateRangeChange = values => {\n    setStartDate(new Date(values[0]));\n    setEndDate(new Date(values[1]));\n  };\n  const handleTimeChange = e => {\n    const time = e.target.value;\n    setSelectedTime(time);\n  };\n  const performSearch = (term, startDate, endDate, time) => {\n    const results = mergeData.filter(item => {\n      var _item$thermostatPacke, _item$thermostatPacke2, _item$thermostatPacke3, _item$thermostatPacke4;\n      if (item !== null && item !== void 0 && (_item$thermostatPacke = item.thermostatPacket) !== null && _item$thermostatPacke !== void 0 && _item$thermostatPacke.info && item !== null && item !== void 0 && (_item$thermostatPacke2 = item.thermostatPacket) !== null && _item$thermostatPacke2 !== void 0 && _item$thermostatPacke2.config && item !== null && item !== void 0 && (_item$thermostatPacke3 = item.thermostatPacket) !== null && _item$thermostatPacke3 !== void 0 && _item$thermostatPacke3.data && item !== null && item !== void 0 && (_item$thermostatPacke4 = item.thermostatPacket) !== null && _item$thermostatPacke4 !== void 0 && _item$thermostatPacke4.settings) {\n        var _product$toLowerCase, _programMode$toLowerC, _hvacMode$toLowerCase, _id$toLowerCase;\n        const {\n          product,\n          id\n        } = item.thermostatPacket.info;\n        const {\n          programMode\n        } = item.thermostatPacket.config;\n        const {\n          hvacMode\n        } = item.thermostatPacket.settings;\n        const timestamp = new Date(item.thermostatPacket.data.timestamp);\n        return ((product === null || product === void 0 ? void 0 : (_product$toLowerCase = product.toLowerCase()) === null || _product$toLowerCase === void 0 ? void 0 : _product$toLowerCase.includes(term === null || term === void 0 ? void 0 : term.toLowerCase())) || (programMode === null || programMode === void 0 ? void 0 : (_programMode$toLowerC = programMode.toLowerCase()) === null || _programMode$toLowerC === void 0 ? void 0 : _programMode$toLowerC.includes(term === null || term === void 0 ? void 0 : term.toLowerCase())) || (hvacMode === null || hvacMode === void 0 ? void 0 : (_hvacMode$toLowerCase = hvacMode.toLowerCase()) === null || _hvacMode$toLowerCase === void 0 ? void 0 : _hvacMode$toLowerCase.includes(term === null || term === void 0 ? void 0 : term.toLowerCase())) || (id === null || id === void 0 ? void 0 : (_id$toLowerCase = id.toLowerCase()) === null || _id$toLowerCase === void 0 ? void 0 : _id$toLowerCase.includes(term === null || term === void 0 ? void 0 : term.toLowerCase()))) && timestamp >= startDate && timestamp <= endDate;\n      }\n    });\n    setSearchResults(results);\n  };\n  var graph = searchResults.map((item, index) => item.thermostatPacket);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          width: \"30%\",\n          height: \"3vh\",\n          padding: \"5px\",\n          marginBottom: \"5px\"\n        },\n        type: \"text\",\n        className: \"search-bar\",\n        placeholder: \"Search product\",\n        value: searchTerm,\n        onChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          width: \"30%\",\n          height: \"3vh\",\n          padding: \"5px\",\n          marginBottom: \"5px\"\n        },\n        type: \"text\",\n        className: \"search-bar\",\n        placeholder: \"Search time (ISO format)\",\n        value: selectedTime,\n        onChange: handleTimeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Start Date: \", startDate.toDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"End Date: \", endDate.toDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        min: new Date(2022, 10, 7).getTime(),\n        max: new Date(2022, 11, 2).getTime(),\n        onChange: handleDateRangeChange,\n        range: true,\n        allowCross: false,\n        style: {\n          width: \"50%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"custom_table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 555,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 556,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"product\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 557,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"version\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"id\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 559,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"hvacMode\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 560,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"deadband10xF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 561,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"outdoorTempLockout10xF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 562,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"programMode\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 563,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"fanMode\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 564,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"numHeatStages\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 565,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"numCompressorStages\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 566,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"numHeatStages\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 567,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"smartSensorCnt\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 568,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"outdoorTemperature10xF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 569,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"indoorTemperature10xF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 570,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"outdoorHumidityPer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 571,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"indoorHumidityPer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 572,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: searchResults.map((item, index) => /*#__PURE__*/_jsxDEV(Displaytable, {\n              data: item\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 509,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchComponent, \"oHiqK/0VAM/UgWTfn9V8xoMIPc8=\");\n_c = SearchComponent;\nexport default SearchComponent;\nvar _c;\n$RefreshReg$(_c, \"SearchComponent\");","map":{"version":3,"names":["React","useState","useEffect","useContext","mergeData","Displaytable","Gdata","Slider","jsxDEV","_jsxDEV","SearchComponent","_s","gdata","searchTerm","setSearchTerm","selectedDate","setSelectedDate","selectedTime","setSelectedTime","searchResults","setSearchResults","startDate","setStartDate","Date","endDate","setEndDate","performSearch","update","graph","handleSearch","e","term","target","value","handleDateRangeChange","values","handleTimeChange","time","results","filter","item","_item$thermostatPacke","_item$thermostatPacke2","_item$thermostatPacke3","_item$thermostatPacke4","thermostatPacket","info","config","data","settings","_product$toLowerCase","_programMode$toLowerC","_hvacMode$toLowerCase","_id$toLowerCase","product","id","programMode","hvacMode","timestamp","toLowerCase","includes","map","index","children","style","width","height","padding","marginBottom","type","className","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","toDateString","min","getTime","max","range","allowCross","_c","$RefreshReg$"],"sources":["C:/Users/madhavi.katika/Downloads/first-task1/first-task1-main/src/Components/SearchData/index.js"],"sourcesContent":["// import React, { useState, useEffect, useContext } from \"react\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import mergeData from \"../../json_data/merged_file.json\";\n// import Displaytable from \"../Displaytable\";\n// import Gdata from \"../GobalContext\";\n// import { Slide, Slider } from '@mui/material';\n\n// const SearchComponent = () => {\n//   let gdata = useContext(Gdata);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [selectedTime, setSelectedTime] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n\n//   useEffect(() => {\n//     performSearch(searchTerm, selectedDate, selectedTime);\n//   }, [searchTerm, selectedDate, selectedTime]);\n\n//   useEffect(() => {\n//     gdata.update(graph);\n//   }, [searchResults]);\n\n//   const handleSearch = (e) => {\n//     const term = e.target.value;\n//     setSearchTerm(term);\n//   };\n\n//   const handleDateChange = (date) => {\n//     setSelectedDate(date);\n//   };\n\n//   const handleTimeChange = (e) => {\n//     const time = e.target.value;\n//     setSelectedTime(time);\n//   };\n//   const performSearch = (term, date, time) => {\n//     const results = mergeData.filter((item) => {\n//       if (item?.thermostatPacket?.info && item?.thermostatPacket?.config && item?.thermostatPacket?.data && item?.thermostatPacket?.settings) {\n//         const { product, id } = item.thermostatPacket.info;\n//         const { programMode } = item.thermostatPacket.config;\n//         const { hvacMode } = item.thermostatPacket.settings;\n//         const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n//         if (!date && !time) {\n//           // When no date and time are selected, include all items\n//           return (\n//             product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())\n//           );\n//         } else if (date && !time) {\n//           // When only date is selected, filter by date\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toDateString() === date.toDateString()\n//           );\n//         } else if (!date && time) {\n//           // When only time is selected, filter by time\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//           );\n//         } else {\n//           // When both date and time are selected, filter by date and time\n//           const selectedDateTime = new Date(date.toDateString() + \" \" + time);\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.getTime() === selectedDateTime.getTime()\n//           );\n//         }\n//       }\n//     });\n\n//     setSearchResults(results);\n//   };\n//   var graph = searchResults.map((item, index) => item.thermostatPacket);\n//   return (\n//     <div>\n//       <div>\n//       <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search product\"\n//         value={searchTerm}\n//         onChange={handleSearch}\n//       />\n//       <DatePicker\n//         style={{ width: \"30%\", height: \"3vh\" }}\n//         selected={selectedDate}\n//         onChange={handleDateChange}\n//         placeholderText=\"mm/dd/yyyy\"\n//         dateFormat=\"MM/dd/yyyy\"\n//       />\n//             <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search time (ISO format)\"\n//         value={selectedTime}\n//         onChange={handleTimeChange}\n//       />\n//       <Slider sx={{maxWidth:'465px'}}\n//   aria-label=\"Temperature\"\n//   defaultValue={0}\n//   min={10}\n//   // getAriaValueText={valuetext}\n\n//   color=\"secondary\"\n// />\n\n//   <div className=\"table-container\">\n//       <table className=\"custom_table\">\n//         <thead>\n//           <tr>\n//             <th>date</th>\n//             <th>time</th>\n//             <th>product</th>\n//             <th>version</th>\n//             <th>id</th>\n//             <th>hvacMode</th>\n//             <th>deadband10xF</th>\n//             <th>outdoorTempLockout10xF</th>\n//             <th>programMode</th>\n//             <th>fanMode</th>\n//             <th>numHeatStages</th>\n//             <th>numCompressorStages</th>\n//             <th>numHeatStages</th>\n//             <th>smartSensorCnt</th>\n//             <th>outdoorTemperature10xF</th>\n//             <th>indoorTemperature10xF</th>\n//             <th>outdoorHumidityPer</th>\n//             <th>indoorHumidityPer</th>\n//           </tr>\n//         </thead>\n//         {searchResults.map((item, index) => (\n//           <Displaytable data={item} key={index} />\n//         ))}\n//       </table>\n//       </div>\n//       </div>\n\n//     </div>\n//   );\n// };\n\n// export default SearchComponent;\n\n// import React, { useState, useEffect, useContext } from \"react\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import mergeData from \"../../json_data/merged_file.json\";\n// import Displaytable from \"../Displaytable\";\n// import Gdata from \"../GobalContext\";\n// import Slider from \"rc-slider\";\n// import \"rc-slider/assets/index.css\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n\n// const SearchComponent = () => {\n//   let gdata = useContext(Gdata);\n\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n\n//   const [selectedDate, setSelectedDate] = useState(null);\n\n//   const [selectedTime, setSelectedTime] = useState(\"\");\n\n//   const [searchResults, setSearchResults] = useState([]);\n\n\n//   const [startDate, setStartDate] = useState(new Date());\n\n//   const [endDate, setEndDate] = useState(new Date());\n\n//   useEffect(() => {\n//     performSearch(searchTerm, startDate, endDate, selectedTime);\n//   }, [searchTerm, startDate, endDate, selectedTime]);\n\n//   useEffect(() => {\n//     gdata.update(graph);\n//   }, [searchResults]);\n\n//   const handleSearch = (e) => {\n//     const term = e.target.value;\n\n//     setSearchTerm(term);\n//   };\n\n//   const handleDateRangeChange = (values) => {\n//     setStartDate(new Date(values[0]));\n\n//     setEndDate(new Date(values[1]));\n\n//     console.log(startDate);\n\n//     console.log(endDate);\n//   };\n\n//   // const handleDateChange = (date) => {\n\n//   //   setSelectedDate(date);\n\n//   // };\n\n//   const handleTimeChange = (e) => {\n//     const time = e.target.value;\n\n//     setSelectedTime(time);\n//   };\n\n//   const performSearch = (term, startDate, endDate, time) => {\n//     const results = mergeData.filter((item) => {\n//       if (\n//         item?.thermostatPacket?.info &&\n//         item?.thermostatPacket?.config &&\n//         item?.thermostatPacket?.data &&\n//         item?.thermostatPacket?.settings\n//       ) {\n//         const { product, id } = item.thermostatPacket.info;\n//         const { programMode } = item.thermostatPacket.config;\n//         const { hvacMode } = item.thermostatPacket.settings;\n//         const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n//         if (!startDate && !endDate && !time) {\n//           // When no date range and time are selected, include all items\n\n//           return (\n//             product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())\n//           );\n//         } else if (!startDate && !endDate && time) {\n//           // When only time is selected, filter by time\n\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//           );\n//         } else if (startDate && endDate && !time) {\n//           // When only date range is selected, filter by date range\n\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp >= startDate &&\n//             timestamp <= endDate\n//           );\n//         } else {\n//           // When both date range and time are selected, filter by date range and time\n\n//           const selectedDateTime = new Date(\n//             startDate.toDateString() + \" \" + time\n//           );\n\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp >= startDate &&\n//             timestamp <= endDate &&\n//             timestamp.getTime() === selectedDateTime.getTime()\n//           );\n//         }\n//       }\n//     });\n\n//     setSearchResults(results);\n//   };\n\n//   var graph = searchResults.map((item, index) => item.thermostatPacket);\n\n//   return (\n//     <div>\n//       <div>\n//         <input\n//           style={{\n//             width: \"30%\",\n\n//             height: \"3vh\",\n\n//             padding: \"5px\",\n\n//             marginBottom: \"5px\",\n//           }}\n//           type=\"text\"\n//           className=\"search-bar\"\n//           placeholder=\"Search product\"\n//           value={searchTerm}\n//           onChange={handleSearch}\n//         />\n\n//         {/* <DatePicker\n\n//         style={{ width: \"30%\", height: \"3vh\" }}\n\n//         selected={selectedDate}\n\n//         onChange={handleDateChange}\n\n//         placeholderText=\"mm/dd/yyyy\"\n\n//         dateFormat=\"MM/dd/yyyy\"\n\n//       /> */}\n\n//         <input\n//           style={{\n//             width: \"30%\",\n\n//             height: \"3vh\",\n\n//             padding: \"5px\",\n\n//             marginBottom: \"5px\",\n//           }}\n//           type=\"text\"\n//           className=\"search-bar\"\n//           placeholder=\"Search time (ISO format)\"\n//           value={selectedTime}\n//           onChange={handleTimeChange}\n//         />\n\n//         {/* <Slider sx={{maxWidth:'465px'}}\n\n//   aria-label=\"Temperature\"\n\n//   defaultValue={0}\n\n//   min={10}\n\n//   // getAriaValueText={valuetext}\n\n//   color=\"secondary\"\n\n// /> */}\n\n       \n\n//         <div>Start Date: {startDate.toDateString()}</div>\n\n//         <div>End Date: {endDate.toDateString()}</div>\n\n//         <Slider\n//           min={new Date(2022, 10, 7).getTime()}\n//           max={new Date(2022, 11, 2).getTime()}\n//           // defaultValue={[startDate.getTime(), endDate.getTime()]}\n//           onChange={handleDateRangeChange}\n//           range\n//           allowCross={false}\n//           style={{ width: \"50%\" }}\n//         />\n\n      \n\n//         <div className=\"table-container\">\n//           <table className=\"custom_table\">\n//             <thead>\n//               <tr>\n//                 <th>date</th>\n\n//                 <th>time</th>\n\n//                 <th>product</th>\n\n//                 <th>version</th>\n\n//                 <th>id</th>\n\n//                 <th>hvacMode</th>\n\n//                 <th>deadband10xF</th>\n\n//                 <th>outdoorTempLockout10xF</th>\n\n//                 <th>programMode</th>\n\n//                 <th>fanMode</th>\n\n//                 <th>numHeatStages</th>\n\n//                 <th>numCompressorStages</th>\n\n//                 <th>numHeatStages</th>\n\n//                 <th>smartSensorCnt</th>\n\n//                 <th>outdoorTemperature10xF</th>\n\n//                 <th>indoorTemperature10xF</th>\n\n//                 <th>outdoorHumidityPer</th>\n\n//                 <th>indoorHumidityPer</th>\n//               </tr>\n//             </thead>\n\n//             {searchResults.map((item, index) => (\n//               <Displaytable data={item} key={index} />\n//             ))}\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SearchComponent;\n\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport mergeData from \"../../json_data/merged_file.json\";\nimport Displaytable from \"../Displaytable\";\nimport Gdata from \"../GobalContext\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst SearchComponent = () => {\n  let gdata = useContext(Gdata);\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [selectedTime, setSelectedTime] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [startDate, setStartDate] = useState(new Date('2022-10-07'));\n  const [endDate, setEndDate] = useState(new Date('2022-11-02'));\n\n  useEffect(() => {\n    performSearch(searchTerm, startDate, endDate, selectedTime);\n  }, [searchTerm, startDate, endDate, selectedTime]);\n\n  useEffect(() => {\n    gdata.update(graph);\n  }, [searchResults]);\n\n  const handleSearch = (e) => {\n    const term = e.target.value;\n    setSearchTerm(term);\n  };\n\n  const handleDateRangeChange = (values) => {\n    setStartDate(new Date(values[0]));\n    setEndDate(new Date(values[1]));\n  };\n\n  const handleTimeChange = (e) => {\n    const time = e.target.value;\n    setSelectedTime(time);\n  };\n\n  const performSearch = (term, startDate, endDate, time) => {\n    const results = mergeData.filter((item) => {\n      if (\n        item?.thermostatPacket?.info &&\n        item?.thermostatPacket?.config &&\n        item?.thermostatPacket?.data &&\n        item?.thermostatPacket?.settings\n      ) {\n        const { product, id } = item.thermostatPacket.info;\n        const { programMode } = item.thermostatPacket.config;\n        const { hvacMode } = item.thermostatPacket.settings;\n        const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n        return (\n          (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n            programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n            hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n            id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n          timestamp >= startDate &&\n          timestamp <= endDate\n        );\n      }\n    });\n\n    setSearchResults(results);\n  };\n\n  var graph = searchResults.map((item, index) => item.thermostatPacket);\n\n  return (\n    <div>\n      <div>\n        <input\n          style={{\n            width: \"30%\",\n            height: \"3vh\",\n            padding: \"5px\",\n            marginBottom: \"5px\",\n          }}\n          type=\"text\"\n          className=\"search-bar\"\n          placeholder=\"Search product\"\n          value={searchTerm}\n          onChange={handleSearch}\n        />\n\n        <input\n          style={{\n            width: \"30%\",\n            height: \"3vh\",\n            padding: \"5px\",\n            marginBottom: \"5px\",\n          }}\n          type=\"text\"\n          className=\"search-bar\"\n          placeholder=\"Search time (ISO format)\"\n          value={selectedTime}\n          onChange={handleTimeChange}\n        />\n\n        <div>Start Date: {startDate.toDateString()}</div>\n        <div>End Date: {endDate.toDateString()}</div>\n\n        <Slider\n          min={new Date(2022, 10, 7).getTime()}\n          max={new Date(2022, 11, 2).getTime()}\n          onChange={handleDateRangeChange}\n          range\n          allowCross={false}\n          style={{ width: \"50%\" }}\n        />\n\n        <div className=\"table-container\">\n          <table className=\"custom_table\">\n            <thead>\n              <tr>\n                <th>date</th>\n                <th>time</th>\n                <th>product</th>\n                <th>version</th>\n                <th>id</th>\n                <th>hvacMode</th>\n                <th>deadband10xF</th>\n                <th>outdoorTempLockout10xF</th>\n                <th>programMode</th>\n                <th>fanMode</th>\n                <th>numHeatStages</th>\n                <th>numCompressorStages</th>\n                <th>numHeatStages</th>\n                <th>smartSensorCnt</th>\n                <th>outdoorTemperature10xF</th>\n                <th>indoorTemperature10xF</th>\n                <th>outdoorHumidityPer</th>\n                <th>indoorHumidityPer</th>\n              </tr>\n            </thead>\n            <tbody>\n              {searchResults.map((item, index) => (\n                <Displaytable data={item} key={index} />\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchComponent;\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}