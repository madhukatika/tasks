{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhavi.katika\\\\Downloads\\\\first-task1\\\\first-task1-main\\\\src\\\\Components\\\\LineGraph.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import { Chart } from 'chart.js/auto';\n\n// const LineGraph = (props) => {\n//   let  [graphData,setGraphData]=useState([])\n//   useEffect(()=>{\n//     setGraphData([...props.lineGraph])\n//   },[props.lineGraph])\n//   console.log(graphData)\n//   const chartRef = useRef(null);\n//   const chartInstance = useRef(null);\n// let label=graphData.map((item)=>item.data.timestamp.split(\"T\")[0])\n// // let label=graphData.map((item)=>item.data.timestamp)\n// console.log(\"temp\",graphData.map((item) => item.data.indoorTemperature10xF))\n// console.log(label)\n//   useEffect(() => {\n//     const ctx = chartRef.current.getContext('2d');\n\n//     if (chartInstance.current) {\n//       chartInstance.current.destroy();\n//     }\n\n//     const labels = graphData.map((item)=>item.data.timestamp.split(\"T\")[0]);\n//     // const labels = graphData.map((item)=>item.data.timestamp)\n//     const datasets = graphData.map((item) => ({\n//       label: item.data.indoorTemperature10xF,\n//       data: graphData.map((item) => item.data.indoorTemperature10xF),\n//       fill: false,\n//       borderColor: getRandomColor(),\n//       tension: 0.1,\n\n//     }));\n\n//     chartInstance.current = new Chart(ctx, {\n//       type: 'line',\n//       data: {\n//         labels: labels,\n//         datasets: datasets,\n//       },\n//       options: {\n//         maintainAspectRatio: false,\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//           },\n//         },\n//       },\n//     });\n//   }, [props.lineGraph]);\n\n//   const getRandomColor = () => {\n//     const letters = '0123456789ABCDEF';\n//     let color = '#';\n//     for (let i = 0; i < 6; i++) {\n//       color += letters[Math.floor(Math.random() * 16)];\n//     }\n//     return color;\n//   };\n\n//   return <canvas ref={chartRef} style={{ width: '10%', height: '10%' }} />;\n// };\n\n// export default LineGraph;\n\nimport { Chart } from 'chart.js/auto';\nimport { format } from 'date-fns';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport { default as adapter } from 'chartjs-adapter-date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(AdapterDateFns);\nChart.register(ChartDataLabels);\nconst LineGraph = props => {\n  _s();\n  const [graphData, setGraphData] = useState([]);\n  useEffect(() => {\n    setGraphData([...props.lineGraph]);\n  }, [props.lineGraph]);\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    const labels = graphData.map(item => format(new Date(item.data.timestamp), 'MM/dd/yyyy'));\n    const datasets = graphData.map(item => ({\n      label: item.data.indoorTemperature10xF,\n      data: graphData.map(item => item.data.indoorTemperature10xF),\n      fill: false,\n      borderColor: getRandomColor(),\n      tension: 0.1\n    }));\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: datasets\n      },\n      options: {\n        maintainAspectRatio: false,\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'day',\n              displayFormats: {\n                day: 'MM/DD/YYYY'\n              }\n            },\n            ticks: {\n              maxRotation: 0,\n              minRotation: 0\n            }\n          },\n          y: {\n            beginAtZero: true,\n            maxTicksLimit: 5\n          }\n        }\n      }\n    });\n  }, [props.lineGraph]);\n  const getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef,\n    style: {\n      width: '100%',\n      height: '300px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 10\n  }, this);\n};\n_s(LineGraph, \"muy02FsOBDJ5rhEhNkGNfAOjjkk=\");\n_c = LineGraph;\nexport default LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["Chart","format","ChartDataLabels","default","adapter","jsxDEV","_jsxDEV","register","AdapterDateFns","LineGraph","props","_s","graphData","setGraphData","useState","useEffect","lineGraph","chartRef","useRef","chartInstance","ctx","current","getContext","destroy","labels","map","item","Date","data","timestamp","datasets","label","indoorTemperature10xF","fill","borderColor","getRandomColor","tension","type","options","maintainAspectRatio","scales","x","time","unit","displayFormats","day","ticks","maxRotation","minRotation","y","beginAtZero","maxTicksLimit","letters","color","i","Math","floor","random","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/madhavi.katika/Downloads/first-task1/first-task1-main/src/Components/LineGraph.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import { Chart } from 'chart.js/auto';\r\n\r\n// const LineGraph = (props) => {\r\n//   let  [graphData,setGraphData]=useState([])\r\n//   useEffect(()=>{\r\n//     setGraphData([...props.lineGraph])\r\n//   },[props.lineGraph])\r\n//   console.log(graphData)\r\n//   const chartRef = useRef(null);\r\n//   const chartInstance = useRef(null);\r\n// let label=graphData.map((item)=>item.data.timestamp.split(\"T\")[0])\r\n// // let label=graphData.map((item)=>item.data.timestamp)\r\n// console.log(\"temp\",graphData.map((item) => item.data.indoorTemperature10xF))\r\n// console.log(label)\r\n//   useEffect(() => {\r\n//     const ctx = chartRef.current.getContext('2d');\r\n\r\n//     if (chartInstance.current) {\r\n//       chartInstance.current.destroy();\r\n//     }\r\n\r\n//     const labels = graphData.map((item)=>item.data.timestamp.split(\"T\")[0]);\r\n//     // const labels = graphData.map((item)=>item.data.timestamp)\r\n//     const datasets = graphData.map((item) => ({\r\n//       label: item.data.indoorTemperature10xF,\r\n//       data: graphData.map((item) => item.data.indoorTemperature10xF),\r\n//       fill: false,\r\n//       borderColor: getRandomColor(),\r\n//       tension: 0.1,\r\n      \r\n//     }));\r\n\r\n//     chartInstance.current = new Chart(ctx, {\r\n//       type: 'line',\r\n//       data: {\r\n//         labels: labels,\r\n//         datasets: datasets,\r\n//       },\r\n//       options: {\r\n//         maintainAspectRatio: false,\r\n//         scales: {\r\n//           y: {\r\n//             beginAtZero: true,\r\n//           },\r\n//         },\r\n//       },\r\n//     });\r\n//   }, [props.lineGraph]);\r\n\r\n//   const getRandomColor = () => {\r\n//     const letters = '0123456789ABCDEF';\r\n//     let color = '#';\r\n//     for (let i = 0; i < 6; i++) {\r\n//       color += letters[Math.floor(Math.random() * 16)];\r\n//     }\r\n//     return color;\r\n//   };\r\n\r\n//   return <canvas ref={chartRef} style={{ width: '10%', height: '10%' }} />;\r\n// };\r\n\r\n// export default LineGraph;\r\n\r\n\r\nimport { Chart } from 'chart.js/auto';\r\nimport { format } from 'date-fns';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport { default as adapter } from 'chartjs-adapter-date-fns';\r\n\r\nChart.register(AdapterDateFns);\r\nChart.register(ChartDataLabels);\r\n\r\nconst LineGraph = (props) => {\r\n  const [graphData, setGraphData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setGraphData([...props.lineGraph]);\r\n  }, [props.lineGraph]);\r\n\r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n\r\n    const labels = graphData.map((item) => format(new Date(item.data.timestamp), 'MM/dd/yyyy'));\r\n    const datasets = graphData.map((item) => ({\r\n      label: item.data.indoorTemperature10xF,\r\n      data: graphData.map((item) => item.data.indoorTemperature10xF),\r\n      fill: false,\r\n      borderColor: getRandomColor(),\r\n      tension: 0.1,\r\n    }));\r\n\r\n    chartInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: labels,\r\n        datasets: datasets,\r\n      },\r\n      options: {\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          x: {\r\n            type: 'time',\r\n            time: {\r\n              unit: 'day',\r\n              displayFormats: {\r\n                day: 'MM/DD/YYYY',\r\n              },\r\n            },\r\n            ticks: {\r\n              maxRotation: 0,\r\n              minRotation: 0,\r\n            },\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            maxTicksLimit: 5,\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }, [props.lineGraph]);\r\n\r\n  const getRandomColor = () => {\r\n    const letters = '0123456789ABCDEF';\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  };\r\n\r\n  return <canvas ref={chartRef} style={{ width: '100%', height: '300px' }} />;\r\n};\r\n\r\nexport default LineGraph;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}