{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhavi.katika\\\\Downloads\\\\first-task1\\\\first-task1-main\\\\src\\\\Components\\\\LineGraph.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import { Chart } from 'chart.js/auto';\n\n// const LineGraph = (props) => {\n//   const [graphData, setGraphData] = useState([]);\n\n//   useEffect(() => {\n//     setGraphData([...props.lineGraph]);\n//   }, [props.lineGraph]);\n\n//   const chartRef = useRef(null);\n//   const chartInstance = useRef(null);\n\n//   let labels = graphData.map((item) => item.data.timestamp);\n//   let datasets = [];\n\n//   const fields = [\n//     { key: 'indoorTemperature10xF', label: 'Indoor Temperature' },\n//     { key: 'outdoorHumidityPer', label: 'Outdoor Humidity' },\n//     { key: 'indoorHumidityPer', label: 'Indoor Humidity' },\n//     { key: 'outdoorTemperature10xF', label: 'Outdoor Temperature' },\n//   ];\n\n//   useEffect(() => {\n//     const ctx = chartRef.current.getContext('2d');\n\n//     if (chartInstance.current) {\n//       chartInstance.current.destroy();\n//     }\n\n//     datasets = fields.map((field) => ({\n//       label: field.label,\n//       data: graphData.map((item) => item.data[field.key]),\n//       fill: false,\n//       borderColor: getRandomColor(),\n//       tension: 0.1,\n//     }));\n\n//     chartInstance.current = new Chart(ctx, {\n//       type: 'line',\n//       data: {\n//         labels: labels,\n//         datasets: datasets,\n//       },\n//       options: {\n//         maintainAspectRatio: true,\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//           },\n//         },\n//       },\n//     });\n//   }, [graphData]);\n\n//   const getRandomColor = () => {\n//     const letters = '0123456789ABCDEF';\n//     let color = '#';\n//     for (let i = 0; i < 6; i++) {\n//       color += letters[Math.floor(Math.random() * 16)];\n//     }\n//     return color;\n//   };\n\n//   return <canvas ref={chartRef} style={{ width: '100%', height: '200px' }} />;\n// };\n\n// export default LineGraph;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Chart } from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineGraph = props => {\n  _s();\n  const [graphData, setGraphData] = useState([]);\n  useEffect(() => {\n    setGraphData([...props.lineGraph]);\n  }, [props.lineGraph]);\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  const fields = [{\n    key: 'indoorTemperature10xF',\n    label: 'Indoor Temperature'\n  }, {\n    key: 'outdoorHumidityPer',\n    label: 'Outdoor Humidity'\n  }, {\n    key: 'indoorHumidityPer',\n    label: 'Indoor Humidity'\n  }, {\n    key: 'outdoorTemperature10xF',\n    label: 'Outdoor Temperature'\n  }];\n  useEffect(() => {\n    const ctx = chartRef.current.getContext();\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    const timestamps = Array.from(new Set(graphData.map(item => item.data.timestamp)));\n    const datasets = fields.map(field => ({\n      label: field.label,\n      data: timestamps.map(timestamp => {\n        const item = graphData.find(data => data.data.timestamp === timestamp);\n        return item ? item.data[field.key] : null;\n      }),\n      fill: false,\n      borderColor: getRandomColor(),\n      tension: 0.1\n    }));\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: timestamps,\n        datasets: datasets\n      },\n      options: {\n        maintainAspectRatio: true,\n        scales: {\n          x: {\n            display: true,\n            title: {\n              display: true,\n              text: 'Timestamp'\n            }\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'Value'\n            }\n          }\n        }\n      }\n    });\n  }, [graphData]);\n  const getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef,\n    style: {\n      width: '100%',\n      height: '200px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 10\n  }, this);\n};\n_s(LineGraph, \"muy02FsOBDJ5rhEhNkGNfAOjjkk=\");\n_c = LineGraph;\nexport default LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","jsxDEV","_jsxDEV","LineGraph","props","_s","graphData","setGraphData","lineGraph","chartRef","chartInstance","fields","key","label","ctx","current","getContext","destroy","timestamps","Array","from","Set","map","item","data","timestamp","datasets","field","find","fill","borderColor","getRandomColor","tension","type","labels","options","maintainAspectRatio","scales","x","display","title","text","y","beginAtZero","letters","color","i","Math","floor","random","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/madhavi.katika/Downloads/first-task1/first-task1-main/src/Components/LineGraph.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import { Chart } from 'chart.js/auto';\r\n\r\n// const LineGraph = (props) => {\r\n//   const [graphData, setGraphData] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     setGraphData([...props.lineGraph]);\r\n//   }, [props.lineGraph]);\r\n\r\n//   const chartRef = useRef(null);\r\n//   const chartInstance = useRef(null);\r\n\r\n//   let labels = graphData.map((item) => item.data.timestamp);\r\n//   let datasets = [];\r\n\r\n//   const fields = [\r\n//     { key: 'indoorTemperature10xF', label: 'Indoor Temperature' },\r\n//     { key: 'outdoorHumidityPer', label: 'Outdoor Humidity' },\r\n//     { key: 'indoorHumidityPer', label: 'Indoor Humidity' },\r\n//     { key: 'outdoorTemperature10xF', label: 'Outdoor Temperature' },\r\n//   ];\r\n\r\n//   useEffect(() => {\r\n//     const ctx = chartRef.current.getContext('2d');\r\n\r\n//     if (chartInstance.current) {\r\n//       chartInstance.current.destroy();\r\n//     }\r\n\r\n//     datasets = fields.map((field) => ({\r\n//       label: field.label,\r\n//       data: graphData.map((item) => item.data[field.key]),\r\n//       fill: false,\r\n//       borderColor: getRandomColor(),\r\n//       tension: 0.1,\r\n//     }));\r\n\r\n//     chartInstance.current = new Chart(ctx, {\r\n//       type: 'line',\r\n//       data: {\r\n//         labels: labels,\r\n//         datasets: datasets,\r\n//       },\r\n//       options: {\r\n//         maintainAspectRatio: true,\r\n//         scales: {\r\n//           y: {\r\n//             beginAtZero: true,\r\n//           },\r\n//         },\r\n//       },\r\n//     });\r\n//   }, [graphData]);\r\n\r\n//   const getRandomColor = () => {\r\n//     const letters = '0123456789ABCDEF';\r\n//     let color = '#';\r\n//     for (let i = 0; i < 6; i++) {\r\n//       color += letters[Math.floor(Math.random() * 16)];\r\n//     }\r\n//     return color;\r\n//   };\r\n\r\n//   return <canvas ref={chartRef} style={{ width: '100%', height: '200px' }} />;\r\n// };\r\n\r\n// export default LineGraph;\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Chart } from 'chart.js/auto';\r\n\r\nconst LineGraph = (props) => {\r\n  const [graphData, setGraphData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setGraphData([...props.lineGraph]);\r\n  }, [props.lineGraph]);\r\n\r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\n\r\n  const fields = [\r\n    { key: 'indoorTemperature10xF', label: 'Indoor Temperature' },\r\n    { key: 'outdoorHumidityPer', label: 'Outdoor Humidity' },\r\n    { key: 'indoorHumidityPer', label: 'Indoor Humidity' },\r\n    { key: 'outdoorTemperature10xF', label: 'Outdoor Temperature' },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const ctx = chartRef.current.getContext();\r\n\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n\r\n    const timestamps = Array.from(\r\n      new Set(graphData.map((item) => item.data.timestamp))\r\n    );\r\n\r\n    const datasets = fields.map((field) => ({\r\n      label: field.label,\r\n      data: timestamps.map((timestamp) => {\r\n        const item = graphData.find((data) => data.data.timestamp === timestamp);\r\n        return item ? item.data[field.key] : null;\r\n      }),\r\n      fill: false,\r\n      borderColor: getRandomColor(),\r\n      tension: 0.1,\r\n    }));\r\n\r\n    chartInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: timestamps,\r\n        datasets: datasets,\r\n      },\r\n      options: {\r\n        maintainAspectRatio: true,\r\n        scales: {\r\n          x: {\r\n            display: true,\r\n            title: {\r\n              display: true,\r\n              text: 'Timestamp',\r\n            },\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            title: {\r\n              display: true,\r\n              text: 'Value',\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }, [graphData]);\r\n\r\n  const getRandomColor = () => {\r\n    const letters = '0123456789ABCDEF';\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  };\r\n\r\n  return <canvas ref={chartRef} style={{ width: '100%', height: '200px' }} />;\r\n};\r\n\r\nexport default LineGraph;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}