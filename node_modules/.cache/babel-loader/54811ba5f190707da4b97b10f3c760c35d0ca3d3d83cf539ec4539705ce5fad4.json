{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhavi.katika\\\\Downloads\\\\first-task1\\\\first-task1-main\\\\src\\\\Components\\\\LineGraph.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import { Chart } from 'chart.js/auto';\n\n// const LineGraph = (props) => {\n//   const [graphData, setGraphData] = useState([]);\n\n//   useEffect(() => {\n//     setGraphData([...props.lineGraph]);\n//   }, [props.lineGraph]);\n\n//   const chartRef = useRef(null);\n//   const chartInstance = useRef(null);\n\n//   let labels = graphData.map((item) => item.data.timestamp);\n//   let datasets = [];\n\n//   const fields = [\n//     { key: 'indoorTemperature10xF', label: 'Indoor Temperature' },\n//     { key: 'outdoorHumidityPer', label: 'Outdoor Humidity' },\n//     { key: 'indoorHumidityPer', label: 'Indoor Humidity' },\n//     { key: 'outdoorTemperature10xF', label: 'Outdoor Temperature' },\n//   ];\n\n//   useEffect(() => {\n//     const ctx = chartRef.current.getContext('2d');\n\n//     if (chartInstance.current) {\n//       chartInstance.current.destroy();\n//     }\n\n//     datasets = fields.map((field) => ({\n//       label: field.label,\n//       data: graphData.map((item) => item.data[field.key]),\n//       fill: false,\n//       borderColor: getRandomColor(),\n//       tension: 0.1,\n//     }));\n\n//     chartInstance.current = new Chart(ctx, {\n//       type: 'line',\n//       data: {\n//         labels: labels,\n//         datasets: datasets,\n//       },\n//       options: {\n//         maintainAspectRatio: true,\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//           },\n//         },\n//       },\n//     });\n//   }, [graphData]);\n\n//   const getRandomColor = () => {\n//     const letters = '0123456789ABCDEF';\n//     let color = '#';\n//     for (let i = 0; i < 6; i++) {\n//       color += letters[Math.floor(Math.random() * 16)];\n//     }\n//     return color;\n//   };\n\n//   return <canvas ref={chartRef}  />;\n// };\n\n// export default LineGraph;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Chart } from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineGraph = _ref => {\n  _s();\n  let {\n    lineGraph,\n    selectedTimestamp\n  } = _ref;\n  const [graphData, setGraphData] = useState([]);\n  useEffect(() => {\n    setGraphData([...lineGraph]);\n  }, [lineGraph]);\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  let labels = graphData.map(item => item.data.timestamp);\n  let datasets = [];\n  const fields = [{\n    key: 'indoorTemperature10xF',\n    label: 'Indoor Temperature'\n  }, {\n    key: 'outdoorHumidityPer',\n    label: 'Outdoor Humidity'\n  }, {\n    key: 'indoorHumidityPer',\n    label: 'Indoor Humidity'\n  }, {\n    key: 'outdoorTemperature10xF',\n    label: 'Outdoor Temperature'\n  }];\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    datasets = fields.map(field => ({\n      label: field.label,\n      data: graphData.map(item => item.data[field.key]),\n      fill: false,\n      borderColor: getRandomColor(),\n      tension: 0.1\n    }));\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: datasets\n      },\n      options: {\n        maintainAspectRatio: true,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  }, [graphData]);\n  useEffect(() => {\n    if (chartRef.current && chartInstance.current) {\n      const index = graphData.findIndex(item => item.data.timestamp === selectedTimestamp);\n      const scrollPercentage = index / (graphData.length - 1) * 100;\n      chartInstance.current.options.plugins.streaming.pause = true; // Pause streaming to prevent auto-scrolling\n      chartInstance.current.options.plugins.streaming.scroll = {\n        x: scrollPercentage\n      }; // Set the scroll position\n      chartInstance.current.update(); // Update the chart\n    }\n  }, [selectedTimestamp]);\n  const getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 10\n  }, this);\n};\n_s(LineGraph, \"uZWGN0+5UTk1uZCvSNdo9equlmE=\");\n_c = LineGraph;\nexport default LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","jsxDEV","_jsxDEV","LineGraph","_ref","_s","lineGraph","selectedTimestamp","graphData","setGraphData","chartRef","chartInstance","labels","map","item","data","timestamp","datasets","fields","key","label","ctx","current","getContext","destroy","field","fill","borderColor","getRandomColor","tension","type","options","maintainAspectRatio","scales","y","beginAtZero","index","findIndex","scrollPercentage","length","plugins","streaming","pause","scroll","x","update","letters","color","i","Math","floor","random","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/madhavi.katika/Downloads/first-task1/first-task1-main/src/Components/LineGraph.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import { Chart } from 'chart.js/auto';\r\n\r\n// const LineGraph = (props) => {\r\n//   const [graphData, setGraphData] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     setGraphData([...props.lineGraph]);\r\n//   }, [props.lineGraph]);\r\n\r\n//   const chartRef = useRef(null);\r\n//   const chartInstance = useRef(null);\r\n\r\n//   let labels = graphData.map((item) => item.data.timestamp);\r\n//   let datasets = [];\r\n\r\n//   const fields = [\r\n//     { key: 'indoorTemperature10xF', label: 'Indoor Temperature' },\r\n//     { key: 'outdoorHumidityPer', label: 'Outdoor Humidity' },\r\n//     { key: 'indoorHumidityPer', label: 'Indoor Humidity' },\r\n//     { key: 'outdoorTemperature10xF', label: 'Outdoor Temperature' },\r\n//   ];\r\n\r\n//   useEffect(() => {\r\n//     const ctx = chartRef.current.getContext('2d');\r\n\r\n//     if (chartInstance.current) {\r\n//       chartInstance.current.destroy();\r\n//     }\r\n\r\n//     datasets = fields.map((field) => ({\r\n//       label: field.label,\r\n//       data: graphData.map((item) => item.data[field.key]),\r\n//       fill: false,\r\n//       borderColor: getRandomColor(),\r\n//       tension: 0.1,\r\n//     }));\r\n\r\n//     chartInstance.current = new Chart(ctx, {\r\n//       type: 'line',\r\n//       data: {\r\n//         labels: labels,\r\n//         datasets: datasets,\r\n//       },\r\n//       options: {\r\n//         maintainAspectRatio: true,\r\n//         scales: {\r\n//           y: {\r\n//             beginAtZero: true,\r\n//           },\r\n//         },\r\n//       },\r\n//     });\r\n//   }, [graphData]);\r\n\r\n//   const getRandomColor = () => {\r\n//     const letters = '0123456789ABCDEF';\r\n//     let color = '#';\r\n//     for (let i = 0; i < 6; i++) {\r\n//       color += letters[Math.floor(Math.random() * 16)];\r\n//     }\r\n//     return color;\r\n//   };\r\n\r\n//   return <canvas ref={chartRef}  />;\r\n// };\r\n\r\n// export default LineGraph;\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Chart } from 'chart.js/auto';\r\n\r\nconst LineGraph = ({ lineGraph, selectedTimestamp }) => {\r\n  const [graphData, setGraphData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setGraphData([...lineGraph]);\r\n  }, [lineGraph]);\r\n\r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\n\r\n  let labels = graphData.map((item) => item.data.timestamp);\r\n  let datasets = [];\r\n\r\n  const fields = [\r\n    { key: 'indoorTemperature10xF', label: 'Indoor Temperature' },\r\n    { key: 'outdoorHumidityPer', label: 'Outdoor Humidity' },\r\n    { key: 'indoorHumidityPer', label: 'Indoor Humidity' },\r\n    { key: 'outdoorTemperature10xF', label: 'Outdoor Temperature' },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n\r\n    datasets = fields.map((field) => ({\r\n      label: field.label,\r\n      data: graphData.map((item) => item.data[field.key]),\r\n      fill: false,\r\n      borderColor: getRandomColor(),\r\n      tension: 0.1,\r\n    }));\r\n\r\n    chartInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: labels,\r\n        datasets: datasets,\r\n      },\r\n      options: {\r\n        maintainAspectRatio: true,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }, [graphData]);\r\n\r\n  useEffect(() => {\r\n    if (chartRef.current && chartInstance.current) {\r\n      const index = graphData.findIndex((item) => item.data.timestamp === selectedTimestamp);\r\n      const scrollPercentage = (index / (graphData.length - 1)) * 100;\r\n      chartInstance.current.options.plugins.streaming.pause = true; // Pause streaming to prevent auto-scrolling\r\n      chartInstance.current.options.plugins.streaming.scroll = { x: scrollPercentage }; // Set the scroll position\r\n      chartInstance.current.update(); // Update the chart\r\n    }\r\n  }, [selectedTimestamp]);\r\n\r\n  const getRandomColor = () => {\r\n    const letters = '0123456789ABCDEF';\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  };\r\n\r\n  return <canvas ref={chartRef} />;\r\n};\r\n\r\nexport default LineGraph;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,KAAK,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,SAAS,GAAGC,IAAA,IAAsC;EAAAC,EAAA;EAAA,IAArC;IAAEC,SAAS;IAAEC;EAAkB,CAAC,GAAAH,IAAA;EACjD,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE9CF,SAAS,CAAC,MAAM;IACdY,YAAY,CAAC,CAAC,GAAGH,SAAS,CAAC,CAAC;EAC9B,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,MAAMI,QAAQ,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMa,aAAa,GAAGb,MAAM,CAAC,IAAI,CAAC;EAElC,IAAIc,MAAM,GAAGJ,SAAS,CAACK,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;EACzD,IAAIC,QAAQ,GAAG,EAAE;EAEjB,MAAMC,MAAM,GAAG,CACb;IAAEC,GAAG,EAAE,uBAAuB;IAAEC,KAAK,EAAE;EAAqB,CAAC,EAC7D;IAAED,GAAG,EAAE,oBAAoB;IAAEC,KAAK,EAAE;EAAmB,CAAC,EACxD;IAAED,GAAG,EAAE,mBAAmB;IAAEC,KAAK,EAAE;EAAkB,CAAC,EACtD;IAAED,GAAG,EAAE,wBAAwB;IAAEC,KAAK,EAAE;EAAsB,CAAC,CAChE;EAEDvB,SAAS,CAAC,MAAM;IACd,MAAMwB,GAAG,GAAGX,QAAQ,CAACY,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;IAE7C,IAAIZ,aAAa,CAACW,OAAO,EAAE;MACzBX,aAAa,CAACW,OAAO,CAACE,OAAO,CAAC,CAAC;IACjC;IAEAP,QAAQ,GAAGC,MAAM,CAACL,GAAG,CAAEY,KAAK,KAAM;MAChCL,KAAK,EAAEK,KAAK,CAACL,KAAK;MAClBL,IAAI,EAAEP,SAAS,CAACK,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAACU,KAAK,CAACN,GAAG,CAAC,CAAC;MACnDO,IAAI,EAAE,KAAK;MACXC,WAAW,EAAEC,cAAc,CAAC,CAAC;MAC7BC,OAAO,EAAE;IACX,CAAC,CAAC,CAAC;IAEHlB,aAAa,CAACW,OAAO,GAAG,IAAItB,KAAK,CAACqB,GAAG,EAAE;MACrCS,IAAI,EAAE,MAAM;MACZf,IAAI,EAAE;QACJH,MAAM,EAAEA,MAAM;QACdK,QAAQ,EAAEA;MACZ,CAAC;MACDc,OAAO,EAAE;QACPC,mBAAmB,EAAE,IAAI;QACzBC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,WAAW,EAAE;UACf;QACF;MACF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC3B,SAAS,CAAC,CAAC;EAEfX,SAAS,CAAC,MAAM;IACd,IAAIa,QAAQ,CAACY,OAAO,IAAIX,aAAa,CAACW,OAAO,EAAE;MAC7C,MAAMc,KAAK,GAAG5B,SAAS,CAAC6B,SAAS,CAAEvB,IAAI,IAAKA,IAAI,CAACC,IAAI,CAACC,SAAS,KAAKT,iBAAiB,CAAC;MACtF,MAAM+B,gBAAgB,GAAIF,KAAK,IAAI5B,SAAS,CAAC+B,MAAM,GAAG,CAAC,CAAC,GAAI,GAAG;MAC/D5B,aAAa,CAACW,OAAO,CAACS,OAAO,CAACS,OAAO,CAACC,SAAS,CAACC,KAAK,GAAG,IAAI,CAAC,CAAC;MAC9D/B,aAAa,CAACW,OAAO,CAACS,OAAO,CAACS,OAAO,CAACC,SAAS,CAACE,MAAM,GAAG;QAAEC,CAAC,EAAEN;MAAiB,CAAC,CAAC,CAAC;MAClF3B,aAAa,CAACW,OAAO,CAACuB,MAAM,CAAC,CAAC,CAAC,CAAC;IAClC;EACF,CAAC,EAAE,CAACtC,iBAAiB,CAAC,CAAC;EAEvB,MAAMqB,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMkB,OAAO,GAAG,kBAAkB;IAClC,IAAIC,KAAK,GAAG,GAAG;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,KAAK,IAAID,OAAO,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAClD;IACA,OAAOJ,KAAK;EACd,CAAC;EAED,oBAAO7C,OAAA;IAAQkD,GAAG,EAAE1C;EAAS;IAAA2C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClC,CAAC;AAACnD,EAAA,CAxEIF,SAAS;AAAAsD,EAAA,GAATtD,SAAS;AA0Ef,eAAeA,SAAS;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}