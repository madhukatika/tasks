{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhavi.katika\\\\Downloads\\\\first-task1\\\\first-task1-main\\\\src\\\\Components\\\\scrollbar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Chart } from 'chart.js/auto';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineGraph1 = _ref => {\n  _s();\n  let {\n    lineGraph,\n    selectedStartDate,\n    selectedEndDate\n  } = _ref;\n  const [graphData, setGraphData] = useState([]);\n  useEffect(() => {\n    setGraphData([...lineGraph]);\n  }, [lineGraph]);\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  let labels = graphData.map(item => item.data.timestamp);\n  let datasets = [];\n  const fields = [{\n    key: 'indoorTemperature10xF',\n    label: 'Indoor Temperature'\n  }, {\n    key: 'outdoorHumidityPer',\n    label: 'Outdoor Humidity'\n  }, {\n    key: 'indoorHumidityPer',\n    label: 'Indoor Humidity'\n  }, {\n    key: 'outdoorTemperature10xF',\n    label: 'Outdoor Temperature'\n  }];\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    const filteredData = graphData.filter(item => {\n      const timestamp = item.data.timestamp;\n      return timestamp >= selectedStartDate && timestamp <= selectedEndDate;\n    });\n    datasets = fields.map(field => ({\n      label: field.label,\n      data: filteredData.map(item => item.data[field.key]),\n      fill: false,\n      borderColor: getRandomColor(),\n      tension: 0.1\n    }));\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: datasets\n      },\n      options: {\n        maintainAspectRatio: true,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  }, [graphData, selectedStartDate, selectedEndDate]);\n  const getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef,\n      style: {\n        width: '100%',\n        height: '200px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      min: new Date('2022-11-07').getTime(),\n      max: new Date('2022-12-02').getTime(),\n      defaultValue: selectedStartDate,\n      value: selectedStartDate,\n      onChange: value => {\n        setSelectedStartDate(value);\n      },\n      allowCross: false,\n      step: 24 * 60 * 60 * 1000 // 1 day in milliseconds\n      ,\n      marks: {\n        [new Date('2022-11-07').getTime()]: '2022-11-07',\n        [new Date('2022-12-02').getTime()]: '2022-12-02'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(LineGraph1, \"muy02FsOBDJ5rhEhNkGNfAOjjkk=\");\n_c = LineGraph1;\nexport default LineGraph1;\nvar _c;\n$RefreshReg$(_c, \"LineGraph1\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","Slider","jsxDEV","_jsxDEV","LineGraph1","_ref","_s","lineGraph","selectedStartDate","selectedEndDate","graphData","setGraphData","chartRef","chartInstance","labels","map","item","data","timestamp","datasets","fields","key","label","ctx","current","getContext","destroy","filteredData","filter","field","fill","borderColor","getRandomColor","tension","type","options","maintainAspectRatio","scales","y","beginAtZero","letters","color","i","Math","floor","random","children","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","min","Date","getTime","max","defaultValue","value","onChange","setSelectedStartDate","allowCross","step","marks","_c","$RefreshReg$"],"sources":["C:/Users/madhavi.katika/Downloads/first-task1/first-task1-main/src/Components/scrollbar.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Chart } from 'chart.js/auto';\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\n\r\nconst LineGraph1 = ({ lineGraph, selectedStartDate, selectedEndDate }) => {\r\n  const [graphData, setGraphData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setGraphData([...lineGraph]);\r\n  }, [lineGraph]);\r\n\r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\n\r\n  let labels = graphData.map((item) => item.data.timestamp);\r\n  let datasets = [];\r\n\r\n  const fields = [\r\n    { key: 'indoorTemperature10xF', label: 'Indoor Temperature' },\r\n    { key: 'outdoorHumidityPer', label: 'Outdoor Humidity' },\r\n    { key: 'indoorHumidityPer', label: 'Indoor Humidity' },\r\n    { key: 'outdoorTemperature10xF', label: 'Outdoor Temperature' },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n\r\n    const filteredData = graphData.filter((item) => {\r\n      const timestamp = item.data.timestamp;\r\n      return timestamp >= selectedStartDate && timestamp <= selectedEndDate;\r\n    });\r\n\r\n    datasets = fields.map((field) => ({\r\n      label: field.label,\r\n      data: filteredData.map((item) => item.data[field.key]),\r\n      fill: false,\r\n      borderColor: getRandomColor(),\r\n      tension: 0.1,\r\n    }));\r\n\r\n    chartInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: labels,\r\n        datasets: datasets,\r\n      },\r\n      options: {\r\n        maintainAspectRatio: true,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }, [graphData, selectedStartDate, selectedEndDate]);\r\n\r\n  const getRandomColor = () => {\r\n    const letters = '0123456789ABCDEF';\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={chartRef} style={{ width: '100%', height: '200px' }} />\r\n      <Slider\r\n        min={new Date('2022-11-07').getTime()}\r\n        max={new Date('2022-12-02').getTime()}\r\n        defaultValue={selectedStartDate}\r\n        value={selectedStartDate}\r\n        onChange={(value) => {\r\n          setSelectedStartDate(value);\r\n        }}\r\n        allowCross={false}\r\n        step={24 * 60 * 60 * 1000} // 1 day in milliseconds\r\n        marks={{\r\n          [new Date('2022-11-07').getTime()]: '2022-11-07',\r\n          [new Date('2022-12-02').getTime()]: '2022-12-02',\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineGraph1;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}