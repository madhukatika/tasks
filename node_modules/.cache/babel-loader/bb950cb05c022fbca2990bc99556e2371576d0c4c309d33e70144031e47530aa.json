{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhavi.katika\\\\Downloads\\\\first-task1\\\\first-task1-main\\\\src\\\\Components\\\\LineGraph.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import { Chart } from 'chart.js/auto';\n\n// const LineGraph = (props) => {\n//   const [graphData, setGraphData] = useState([]);\n\n//   useEffect(() => {\n//     setGraphData([...props.lineGraph]);\n//   }, [props.lineGraph]);\n\n//   const chartRef = useRef(null);\n//   const chartInstance = useRef(null);\n\n//   let labels = graphData.map((item) => item.data.timestamp);\n//   let datasets = [];\n\n//   const fields = [\n//     { key: 'indoorTemperature10xF', label: 'Indoor Temperature' },\n//     { key: 'outdoorHumidityPer', label: 'Outdoor Humidity' },\n//     { key: 'indoorHumidityPer', label: 'Indoor Humidity' },\n//     { key: 'outdoorTemperature10xF', label: 'Outdoor Temperature' },\n//   ];\n\n//   useEffect(() => {\n//     const ctx = chartRef.current.getContext('2d');\n\n//     if (chartInstance.current) {\n//       chartInstance.current.destroy();\n//     }\n\n//     datasets = fields.map((field) => ({\n//       label: field.label,\n//       data: graphData.map((item) => item.data[field.key]),\n//       fill: false,\n//       borderColor: getRandomColor(),\n//       tension: 0.1,\n//     }));\n\n//     chartInstance.current = new Chart(ctx, {\n//       type: 'line',\n//       data: {\n//         labels: labels,\n//         datasets: datasets,\n//       },\n//       options: {\n//         maintainAspectRatio: true,\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//           },\n//         },\n//       },\n//     });\n//   }, [graphData]);\n\n//   const getRandomColor = () => {\n//     const letters = '0123456789ABCDEF';\n//     let color = '#';\n//     for (let i = 0; i < 6; i++) {\n//       color += letters[Math.floor(Math.random() * 16)];\n//     }\n//     return color;\n//   };\n\n//   return <canvas ref={chartRef} style={{ width: '100%', height: '200px' }} />;\n// };\n\n// export default LineGraph;\n\nimport React, { useEffect, useRef } from 'react';\nimport { Chart } from 'chart.js/auto';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineGraph = _ref => {\n  _s();\n  let {\n    lineGraph\n  } = _ref;\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    if (Array.isArray(lineGraph) && lineGraph.length > 0) {\n      const labels = lineGraph.map(item => item.timestamp);\n      const datasets = [{\n        label: 'Data',\n        data: lineGraph.map(item => item.value),\n        fill: false,\n        borderColor: 'rgba(75,192,192,1)',\n        tension: 0.1\n      }];\n      chartInstance.current = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: labels,\n          datasets: datasets\n        },\n        options: {\n          maintainAspectRatio: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  }, [lineGraph]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef,\n      style: {\n        width: '100%',\n        height: '200px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      min: new Date('2022-11-07').getTime(),\n      max: new Date('2022-12-02').getTime(),\n      defaultValue: new Date('2022-11-07').getTime(),\n      marks: {\n        [new Date('2022-11-07').getTime()]: '2022-11-07',\n        [new Date('2022-12-02').getTime()]: '2022-12-02'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(LineGraph, \"u5+iHnwD4hjVcMuzTE/TbI78erc=\");\n_c = LineGraph;\nexport default LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","Slider","jsxDEV","_jsxDEV","LineGraph","_ref","_s","lineGraph","chartRef","chartInstance","ctx","current","getContext","destroy","Array","isArray","length","labels","map","item","timestamp","datasets","label","data","value","fill","borderColor","tension","type","options","maintainAspectRatio","scales","y","beginAtZero","children","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","min","Date","getTime","max","defaultValue","marks","_c","$RefreshReg$"],"sources":["C:/Users/madhavi.katika/Downloads/first-task1/first-task1-main/src/Components/LineGraph.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import { Chart } from 'chart.js/auto';\r\n\r\n// const LineGraph = (props) => {\r\n//   const [graphData, setGraphData] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     setGraphData([...props.lineGraph]);\r\n//   }, [props.lineGraph]);\r\n\r\n//   const chartRef = useRef(null);\r\n//   const chartInstance = useRef(null);\r\n\r\n//   let labels = graphData.map((item) => item.data.timestamp);\r\n//   let datasets = [];\r\n\r\n//   const fields = [\r\n//     { key: 'indoorTemperature10xF', label: 'Indoor Temperature' },\r\n//     { key: 'outdoorHumidityPer', label: 'Outdoor Humidity' },\r\n//     { key: 'indoorHumidityPer', label: 'Indoor Humidity' },\r\n//     { key: 'outdoorTemperature10xF', label: 'Outdoor Temperature' },\r\n//   ];\r\n\r\n//   useEffect(() => {\r\n//     const ctx = chartRef.current.getContext('2d');\r\n\r\n//     if (chartInstance.current) {\r\n//       chartInstance.current.destroy();\r\n//     }\r\n\r\n//     datasets = fields.map((field) => ({\r\n//       label: field.label,\r\n//       data: graphData.map((item) => item.data[field.key]),\r\n//       fill: false,\r\n//       borderColor: getRandomColor(),\r\n//       tension: 0.1,\r\n//     }));\r\n\r\n//     chartInstance.current = new Chart(ctx, {\r\n//       type: 'line',\r\n//       data: {\r\n//         labels: labels,\r\n//         datasets: datasets,\r\n//       },\r\n//       options: {\r\n//         maintainAspectRatio: true,\r\n//         scales: {\r\n//           y: {\r\n//             beginAtZero: true,\r\n//           },\r\n//         },\r\n//       },\r\n//     });\r\n//   }, [graphData]);\r\n\r\n//   const getRandomColor = () => {\r\n//     const letters = '0123456789ABCDEF';\r\n//     let color = '#';\r\n//     for (let i = 0; i < 6; i++) {\r\n//       color += letters[Math.floor(Math.random() * 16)];\r\n//     }\r\n//     return color;\r\n//   };\r\n\r\n//   return <canvas ref={chartRef} style={{ width: '100%', height: '200px' }} />;\r\n// };\r\n\r\n// export default LineGraph;\r\n\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { Chart } from 'chart.js/auto';\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\n\r\nconst LineGraph = ({ lineGraph }) => {\r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n\r\n    if (Array.isArray(lineGraph) && lineGraph.length > 0) {\r\n      const labels = lineGraph.map((item) => item.timestamp);\r\n      const datasets = [\r\n        {\r\n          label: 'Data',\r\n          data: lineGraph.map((item) => item.value),\r\n          fill: false,\r\n          borderColor: 'rgba(75,192,192,1)',\r\n          tension: 0.1,\r\n        },\r\n      ];\r\n\r\n      chartInstance.current = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: labels,\r\n          datasets: datasets,\r\n        },\r\n        options: {\r\n          maintainAspectRatio: true,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n        },\r\n      });\r\n    }\r\n  }, [lineGraph]);\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={chartRef} style={{ width: '100%', height: '200px' }} />\r\n      <Slider\r\n        min={new Date('2022-11-07').getTime()}\r\n        max={new Date('2022-12-02').getTime()}\r\n        defaultValue={new Date('2022-11-07').getTime()}\r\n        marks={{\r\n          [new Date('2022-11-07').getTime()]: '2022-11-07',\r\n          [new Date('2022-12-02').getTime()]: '2022-12-02',\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineGraph;\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}