[{"C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\index.js":"1","C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\App.js":"2","C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\reportWebVitals.js":"3","C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\Components\\GraphData.js":"4","C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\Components\\GobalContext.js":"5","C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\Components\\SearchData\\index.js":"6","C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\Components\\LineGraph.js":"7","C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\Components\\Displaytable.js":"8","C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\Components\\scrollbar.js":"9"},{"size":535,"mtime":1687631952000,"results":"10","hashOfConfig":"11"},{"size":780,"mtime":1688121070715,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1687631952000,"results":"13","hashOfConfig":"11"},{"size":1256,"mtime":1688113681721,"results":"14","hashOfConfig":"11"},{"size":86,"mtime":1687631952000,"results":"15","hashOfConfig":"11"},{"size":12992,"mtime":1688114608426,"results":"16","hashOfConfig":"11"},{"size":6195,"mtime":1688114183910,"results":"17","hashOfConfig":"11"},{"size":1413,"mtime":1687947404566,"results":"18","hashOfConfig":"11"},{"size":826,"mtime":1688121511283,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"vccvs",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\index.js",[],[],[],"C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\App.js",["50","51","52","53"],[],"C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\reportWebVitals.js",[],[],"C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\Components\\GraphData.js",[],[],"C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\Components\\GobalContext.js",[],[],"C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\Components\\SearchData\\index.js",["54","55"],[],"// import React, { useState, useEffect, useContext } from \"react\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import mergeData from \"../../json_data/merged_file.json\";\n// import Displaytable from \"../Displaytable\";\n// import Gdata from \"../GobalContext\";\n// import { Slide, Slider } from '@mui/material';\n\n// const SearchComponent = () => {\n//   let gdata = useContext(Gdata);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [selectedTime, setSelectedTime] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n\n//   useEffect(() => {\n//     performSearch(searchTerm, selectedDate, selectedTime);\n//   }, [searchTerm, selectedDate, selectedTime]);\n\n//   useEffect(() => {\n//     gdata.update(graph);\n//   }, [searchResults]);\n\n//   const handleSearch = (e) => {\n//     const term = e.target.value;\n//     setSearchTerm(term);\n//   };\n\n//   const handleDateChange = (date) => {\n//     setSelectedDate(date);\n//   };\n\n//   const handleTimeChange = (e) => {\n//     const time = e.target.value;\n//     setSelectedTime(time);\n//   };\n//   const performSearch = (term, date, time) => {\n//     const results = mergeData.filter((item) => {\n//       if (item?.thermostatPacket?.info && item?.thermostatPacket?.config && item?.thermostatPacket?.data && item?.thermostatPacket?.settings) {\n//         const { product, id } = item.thermostatPacket.info;\n//         const { programMode } = item.thermostatPacket.config;\n//         const { hvacMode } = item.thermostatPacket.settings;\n//         const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n//         if (!date && !time) {\n//           // When no date and time are selected, include all items\n//           return (\n//             product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             id?.toLowerCase()?.includes(term?.toLowerCase())\n//           );\n//         } else if (date && !time) {\n//           // When only date is selected, filter by date\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toDateString() === date.toDateString()\n//           );\n//         } else if (!date && time) {\n//           // When only time is selected, filter by time\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.toISOString().split(\"T\")[1].startsWith(time)\n//           );\n//         } else {\n//           // When both date and time are selected, filter by date and time\n//           const selectedDateTime = new Date(date.toDateString() + \" \" + time);\n//           return (\n//             (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//             programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n//               id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n//             timestamp.getTime() === selectedDateTime.getTime()\n//           );\n//         }\n//       }\n//     });\n\n//     setSearchResults(results);\n//   };\n//   var graph = searchResults.map((item, index) => item.thermostatPacket);\n//   return (\n//     <div>\n//       <div>\n//       <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search product\"\n//         value={searchTerm}\n//         onChange={handleSearch}\n//       />\n//       <DatePicker\n//         style={{ width: \"30%\", height: \"3vh\" }}\n//         selected={selectedDate}\n//         onChange={handleDateChange}\n//         placeholderText=\"mm/dd/yyyy\"\n//         dateFormat=\"MM/dd/yyyy\"\n//       />\n//             <input\n//         style={{\n//           width: \"30%\",\n//           height: \"3vh\",\n//           padding: \"5px\",\n//           marginBottom: \"5px\",\n//         }}\n//         type=\"text\"\n//         className=\"search-bar\"\n//         placeholder=\"Search time (ISO format)\"\n//         value={selectedTime}\n//         onChange={handleTimeChange}\n//       />\n//       <Slider sx={{maxWidth:'465px'}}\n//   aria-label=\"Temperature\"\n//   defaultValue={0}\n//   min={10}\n//   // getAriaValueText={valuetext}\n\n//   color=\"secondary\"\n// />\n\n//   <div className=\"table-container\">\n//       <table className=\"custom_table\">\n//         <thead>\n//           <tr>\n//             <th>date</th>\n//             <th>time</th>\n//             <th>product</th>\n//             <th>version</th>\n//             <th>id</th>\n//             <th>hvacMode</th>\n//             <th>deadband10xF</th>\n//             <th>outdoorTempLockout10xF</th>\n//             <th>programMode</th>\n//             <th>fanMode</th>\n//             <th>numHeatStages</th>\n//             <th>numCompressorStages</th>\n//             <th>numHeatStages</th>\n//             <th>smartSensorCnt</th>\n//             <th>outdoorTemperature10xF</th>\n//             <th>indoorTemperature10xF</th>\n//             <th>outdoorHumidityPer</th>\n//             <th>indoorHumidityPer</th>\n//           </tr>\n//         </thead>\n//         {searchResults.map((item, index) => (\n//           <Displaytable data={item} key={index} />\n//         ))}\n//       </table>\n//       </div>\n//       </div>\n\n//     </div>\n//   );\n// };\n\n// export default SearchComponent;\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport mergeData from \"../../json_data/merged_file.json\";\nimport Displaytable from \"../Displaytable\";\nimport Gdata from \"../GobalContext\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport DatePicker from \"react-datepicker\";\n\nconst SearchComponent = () => {\n  let gdata = useContext(Gdata);\nconst [searchTerm, setSearchTerm] = useState(\"\");\nconst [selectedDate, setSelectedDate] = useState(null);\nconst [selectedTime, setSelectedTime] = useState(\"\");\nconst [searchResults, setSearchResults] = useState([]);\nconst [startDate, setStartDate] = useState(new Date());\nconst [endDate, setEndDate] = useState(new Date());\n\n  useEffect(() => {\n    performSearch(searchTerm, startDate, endDate, selectedTime);\n  }, [searchTerm, startDate, endDate, selectedTime]);\n\n  useEffect(() => {\n    gdata.update(graph);\n  }, [searchResults]);\n\n  const handleSearch = (e) => {\n    const term = e.target.value;\n\n    setSearchTerm(term);\n  };\n\n  const handleDateRangeChange = (values) => {\n    setStartDate(new Date(values[0]));\n\n    setEndDate(new Date(values[1]));\n\n    console.log(startDate);\n\n    console.log(endDate);\n  };\n\n  const handleDateChange = (date) => {\n\n    setSelectedDate(date);\n\n  };\n\n  const handleTimeChange = (e) => {\n    const time = e.target.value;\n\n    setSelectedTime(time);\n  };\n\n  const performSearch = (term, startDate, endDate, time) => {\n    const results = mergeData.filter((item) => {\n      if (\n        item?.thermostatPacket?.info &&\n        item?.thermostatPacket?.config &&\n        item?.thermostatPacket?.data &&\n        item?.thermostatPacket?.settings\n      ) {\n        const { product, id } = item.thermostatPacket.info;\n        const { programMode } = item.thermostatPacket.config;\n        const { hvacMode } = item.thermostatPacket.settings;\n        const timestamp = new Date(item.thermostatPacket.data.timestamp);\n\n        if (!startDate && !endDate && !time) {\n          // When no date range and time are selected, include all items\n\n          return (\n            product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n            programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n            hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n            id?.toLowerCase()?.includes(term?.toLowerCase())\n          );\n        } else if (!startDate && !endDate && time) {\n          // When only time is selected, filter by time\n\n          return (\n            (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n              programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n              hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n              id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n            timestamp.toISOString().split(\"T\")[1].startsWith(time)\n          );\n        } else if (startDate && endDate && !time) {\n          // When only date range is selected, filter by date range\n\n          return (\n            (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n              programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n              hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n              id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n            timestamp >= startDate &&\n            timestamp <= endDate\n          );\n        } else {\n          // When both date range and time are selected, filter by date range and time\n\n          const selectedDateTime = new Date(\n            startDate.toDateString() + \" \" + time\n          );\n\n          return (\n            (product?.toLowerCase()?.includes(term?.toLowerCase()) ||\n              programMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n              hvacMode?.toLowerCase()?.includes(term?.toLowerCase()) ||\n              id?.toLowerCase()?.includes(term?.toLowerCase())) &&\n            timestamp >= startDate &&\n            timestamp <= endDate &&\n            timestamp.getTime() === selectedDateTime.getTime()\n          );\n        }\n      }\n    });\n\n    setSearchResults(results);\n  };\n\n  var graph = searchResults.map((item, index) => item.thermostatPacket);\n\n  return (\n    <div>\n      <div>\n        <input\n          style={{\n            width: \"30%\",\n\n            height: \"3vh\",\n\n            padding: \"5px\",\n\n            marginBottom: \"5px\",\n          }}\n          type=\"text\"\n          className=\"search-bar\"\n          placeholder=\"Search product\"\n          value={searchTerm}\n          onChange={handleSearch}\n        />\n\n        <DatePicker\n\n        style={{ width: \"30%\", height: \"3vh\" }}\n\n        selected={selectedDate}\n\n        onChange={handleDateChange}\n\n        placeholderText=\"mm/dd/yyyy\"\n\n        dateFormat=\"MM/dd/yyyy\"\n\n      />\n\n        <input\n          style={{\n            width: \"30%\",\n\n            height: \"3vh\",\n\n            padding: \"5px\",\n\n            marginBottom: \"5px\",\n          }}\n          type=\"text\"\n          className=\"search-bar\"\n          placeholder=\"Search time (ISO format)\"\n          value={selectedTime}\n          onChange={handleTimeChange}\n        />\n\n        {/* <Slider sx={{maxWidth:'465px'}}\n\n  aria-label=\"Temperature\"\n\n  defaultValue={0}\n\n  min={10}\n\n  // getAriaValueText={valuetext}\n\n  color=\"secondary\"\n\n/> */}\n\n       \n\n        <div>Start Date: {startDate.toDateString()}</div>\n\n        <div>End Date: {endDate.toDateString()}</div>\n\n        <Slider\n          min={new Date(2022, 10, 7).getTime()}\n          max={new Date(2022, 11, 3).getTime()}\n          // defaultValue={[startDate.getTime(), endDate.getTime()]}\n          onChange={handleDateRangeChange}\n          range\n          allowCross={false}\n          style={{ width: \"50%\" }}\n        />\n\n      \n\n        <div className=\"table-container\">\n          <table className=\"custom_table\">\n            <thead>\n              <tr>\n                <th>date</th>\n\n                <th>time</th>\n\n                <th>product</th>\n\n                <th>version</th>\n\n                <th>id</th>\n\n                <th>hvacMode</th>\n\n                <th>deadband10xF</th>\n\n                <th>outdoorTempLockout10xF</th>\n\n                <th>programMode</th>\n\n                <th>fanMode</th>\n\n                <th>numHeatStages</th>\n\n                <th>numCompressorStages</th>\n\n                <th>numHeatStages</th>\n\n                <th>smartSensorCnt</th>\n\n                <th>outdoorTemperature10xF</th>\n\n                <th>indoorTemperature10xF</th>\n\n                <th>outdoorHumidityPer</th>\n\n                <th>indoorHumidityPer</th>\n              </tr>\n            </thead>\n\n            {searchResults.map((item, index) => (\n              <Displaytable data={item} key={index} />\n            ))}\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchComponent;\n","C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\Components\\LineGraph.js",["56"],[],"// import React, { useEffect, useRef, useState } from 'react';\r\n// import { Chart } from 'chart.js/auto';\r\n\r\n// const LineGraph = (props) => {\r\n//   const [graphData, setGraphData] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     setGraphData([...props.lineGraph]);\r\n//   }, [props.lineGraph]);\r\n\r\n//   const chartRef = useRef(null);\r\n//   const chartInstance = useRef(null);\r\n\r\n//   let labels = graphData.map((item) => item.data.timestamp);\r\n//   let datasets = [];\r\n\r\n//   const fields = [\r\n//     { key: 'indoorTemperature10xF', label: 'Indoor Temperature' },\r\n//     { key: 'outdoorHumidityPer', label: 'Outdoor Humidity' },\r\n//     { key: 'indoorHumidityPer', label: 'Indoor Humidity' },\r\n//     { key: 'outdoorTemperature10xF', label: 'Outdoor Temperature' },\r\n//   ];\r\n\r\n//   useEffect(() => {\r\n//     const ctx = chartRef.current.getContext('2d');\r\n\r\n//     if (chartInstance.current) {\r\n//       chartInstance.current.destroy();\r\n//     }\r\n\r\n//     datasets = fields.map((field) => ({\r\n//       label: field.label,\r\n//       data: graphData.map((item) => item.data[field.key]),\r\n//       fill: false,\r\n//       borderColor: getRandomColor(),\r\n//       tension: 0.1,\r\n//     }));\r\n\r\n//     chartInstance.current = new Chart(ctx, {\r\n//       type: 'line',\r\n//       data: {\r\n//         labels: labels,\r\n//         datasets: datasets,\r\n//       },\r\n//       options: {\r\n//         maintainAspectRatio: true,\r\n//         scales: {\r\n//           y: {\r\n//             beginAtZero: true,\r\n//           },\r\n//         },\r\n//       },\r\n//     });\r\n//   }, [graphData]);\r\n\r\n//   const getRandomColor = () => {\r\n//     const letters = '0123456789ABCDEF';\r\n//     let color = '#';\r\n//     for (let i = 0; i < 6; i++) {\r\n//       color += letters[Math.floor(Math.random() * 16)];\r\n//     }\r\n//     return color;\r\n//   };\r\n\r\n//   return <canvas ref={chartRef} style={{ width: '100%', height: '200px' }} />;\r\n// };\r\n\r\n// export default LineGraph;\r\n\r\n// import React, { useEffect, useRef, useState } from 'react';\r\n// import { Chart } from 'chart.js/auto';\r\n\r\n// const LineGraph = (props) => {\r\n//   const [graphData, setGraphData] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     setGraphData([...props.lineGraph]);\r\n//   }, [props.lineGraph]);\r\n\r\n//   const chartRef = useRef(null);\r\n//   const chartInstance = useRef(null);\r\n\r\n//   let labels = graphData.map((item) => item.data.timestamp);\r\n//   let datasets = [];\r\n\r\n//   const fields = [\r\n//     { key: 'indoorTemperature10xF', label: 'Indoor Temperature' },\r\n//     { key: 'outdoorHumidityPer', label: 'Outdoor Humidity' },\r\n//     { key: 'indoorHumidityPer', label: 'Indoor Humidity' },\r\n//     { key: 'outdoorTemperature10xF', label: 'Outdoor Temperature' },\r\n//   ];\r\n\r\n//   useEffect(() => {\r\n//     const ctx = chartRef.current.getContext('2d');\r\n\r\n//     if (chartInstance.current) {\r\n//       chartInstance.current.destroy();\r\n//     }\r\n\r\n//     datasets = fields.map((field) => ({\r\n//       label: field.label,\r\n//       data: graphData.map((item) => item.data[field.key]),\r\n//       fill: false,\r\n//       borderColor: getRandomColor(),\r\n//       tension: 0.1,\r\n//     }));\r\n\r\n//     chartInstance.current = new Chart(ctx, {\r\n//       type: 'line',\r\n//       data: {\r\n//         labels: labels,\r\n//         datasets: datasets,\r\n//       },\r\n//       options: {\r\n//         maintainAspectRatio: true,\r\n//         scales: {\r\n//           x: {\r\n//             display: true,\r\n//             title: {\r\n//               display: true,\r\n//               text: 'Timestamp',\r\n//             },\r\n//           },\r\n//           y: {\r\n//             beginAtZero: true,\r\n//             title: {\r\n//               display: true,\r\n//               text: 'Value',\r\n//             },\r\n//           },\r\n//         },\r\n//       },\r\n//     });\r\n//   }, [graphData]);\r\n\r\n//   const getRandomColor = () => {\r\n//     const letters = '0123456789ABCDEF';\r\n//     let color = '#';\r\n//     for (let i = 0; i < 6; i++) {\r\n//       color += letters[Math.floor(Math.random() * 16)];\r\n//     }\r\n//     return color;\r\n//   };\r\n\r\n//   return <canvas ref={chartRef}  />;\r\n// };\r\n\r\n// export default LineGraph;\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Chart } from 'chart.js/auto';\r\n\r\nconst LineGraph = (props) => {\r\n  const [graphData, setGraphData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setGraphData([...props.lineGraph]);\r\n  }, [props.lineGraph]);\r\n\r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\n\r\n  let labels = graphData.map((item) => item.data.timestamp);\r\n  let datasets = [];\r\n\r\n  const fields = [\r\n    { key: 'indoorTemperature10xF', label: 'Indoor Temperature' },\r\n    { key: 'outdoorHumidityPer', label: 'Outdoor Humidity' },\r\n    { key: 'indoorHumidityPer', label: 'Indoor Humidity' },\r\n    { key: 'outdoorTemperature10xF', label: 'Outdoor Temperature' },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n\r\n    datasets = fields.map((field) => ({\r\n      label: field.label,\r\n      data: graphData.map((item) => item.data[field.key]),\r\n      fill: false,\r\n      borderColor: getRandomColor(),\r\n      tension: 0.1,\r\n    }));\r\n\r\n    chartInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: labels,\r\n        datasets: datasets,\r\n      },\r\n      options: {\r\n        maintainAspectRatio: true,\r\n        scales: {\r\n          x: {\r\n            display: true,\r\n            title: {\r\n              display: true,\r\n              text: 'Timestamp',\r\n            },\r\n            axis: 'auto', // Set the x-axis display to 'auto'\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            title: {\r\n              display: true,\r\n              text: 'Value',\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }, [graphData]);\r\n\r\n  const getRandomColor = () => {\r\n    const letters = '0123456789ABCDEF';\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  };\r\n\r\n  return <canvas ref={chartRef} />;\r\n};\r\n\r\nexport default LineGraph;\r\n\r\n","C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\Components\\Displaytable.js",[],[],"C:\\Users\\madhavi.katika\\Downloads\\first-task1\\first-task1-main\\src\\Components\\scrollbar.js",[],[],{"ruleId":"57","severity":1,"message":"58","line":2,"column":8,"nodeType":"59","messageId":"60","endLine":2,"endColumn":17},{"ruleId":"57","severity":1,"message":"61","line":3,"column":8,"nodeType":"59","messageId":"60","endLine":3,"endColumn":23},{"ruleId":"57","severity":1,"message":"62","line":5,"column":8,"nodeType":"59","messageId":"60","endLine":5,"endColumn":13},{"ruleId":"57","severity":1,"message":"63","line":7,"column":10,"nodeType":"59","messageId":"60","endLine":7,"endColumn":20},{"ruleId":"64","severity":1,"message":"65","line":195,"column":6,"nodeType":"66","endLine":195,"endColumn":21,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":226,"column":45,"nodeType":"70","messageId":"71","endLine":226,"endColumn":47},{"ruleId":"64","severity":1,"message":"72","line":179,"column":16,"nodeType":"73","endLine":185,"endColumn":8},"no-unused-vars","'GraphData' is defined but never used.","Identifier","unusedVar","'SearchComponent' is defined but never used.","'Gdata' is defined but never used.","'Scrollbars' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'gdata' and 'graph'. Either include them or remove the dependency array.","ArrayExpression",["74"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Assignments to the 'datasets' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression",{"desc":"75","fix":"76"},"Update the dependencies array to be: [gdata, graph, searchResults]",{"range":"77","text":"78"},[7085,7100],"[gdata, graph, searchResults]"]